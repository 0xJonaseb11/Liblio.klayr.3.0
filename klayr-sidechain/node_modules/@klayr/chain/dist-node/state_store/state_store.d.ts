/// <reference types="node" />
import { Schema } from '@klayr/codec';
import { IterateOptions } from '@liskhq/lisk-db';
import { StateDiff } from '../types';
import { CacheDB } from './cache_db';
import { DatabaseReader, DatabaseWriter } from './types';
export { IterateOptions };
export interface KeyValue {
    key: Buffer;
    value: Buffer;
}
export interface DecodedKeyValue<T> {
    key: Buffer;
    value: T;
}
export declare class StateStore {
    private readonly _db;
    private readonly _prefix;
    private _cache;
    private _snapshot;
    private _latestSnapshotId;
    constructor(db: DatabaseReader, prefix?: Buffer, cache?: CacheDB);
    getStore(storePrefix: Buffer, subStorePrefix: Buffer): StateStore;
    get(key: Buffer): Promise<Buffer>;
    getWithSchema<T>(key: Buffer, schema: Schema): Promise<T>;
    has(key: Buffer): Promise<boolean>;
    set(key: Buffer, value: Buffer): Promise<void>;
    setWithSchema(key: Buffer, value: object, schema: Schema): Promise<void>;
    del(key: Buffer): Promise<void>;
    iterate(options: IterateOptions): Promise<KeyValue[]>;
    iterateWithSchema<T>(options: IterateOptions, schema: Schema): Promise<DecodedKeyValue<T>[]>;
    createSnapshot(): number;
    restoreSnapshot(id: number): void;
    finalize(batch: DatabaseWriter): StateDiff;
    private _ensureCache;
    private _getKey;
}
