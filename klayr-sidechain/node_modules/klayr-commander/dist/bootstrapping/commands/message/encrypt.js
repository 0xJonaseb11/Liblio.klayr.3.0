"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptCommand = void 0;
const cryptography_1 = require("@klayr/cryptography");
const core_1 = require("@oclif/core");
const error_1 = require("../../../utils/error");
const flags_1 = require("../../../utils/flags");
const reader_1 = require("../../../utils/reader");
class EncryptCommand extends core_1.Command {
    async run() {
        const { args, flags: { password: passwordSource, message: messageSource, stringify, pretty }, } = await this.parse(EncryptCommand);
        const { message } = args;
        if (!message && !messageSource) {
            throw new error_1.ValidationError('No message was provided.');
        }
        const password = passwordSource !== null && passwordSource !== void 0 ? passwordSource : (await (0, reader_1.getPassphraseFromPrompt)('password', true));
        const dataFromSource = messageSource && (0, reader_1.isFileSource)(messageSource)
            ? await (0, reader_1.readFileSource)(messageSource)
            : messageSource;
        if (!message && !dataFromSource) {
            this.error('Message must be provided through the argument or the flag ');
        }
        const result = await cryptography_1.encrypt.encryptMessageWithPassword(message !== null && message !== void 0 ? message : dataFromSource, password);
        if (stringify) {
            this.log(cryptography_1.encrypt.stringifyEncryptedMessage(result));
            return;
        }
        this.log(!pretty ? JSON.stringify(result) : JSON.stringify(result, undefined, '  '));
    }
}
EncryptCommand.args = [
    {
        name: 'message',
        description: 'Message to encrypt.',
    },
];
EncryptCommand.description = `
	Encrypts a message with a password provided.
	`;
EncryptCommand.examples = ['message:encrypt "Hello world"'];
EncryptCommand.flags = {
    password: core_1.Flags.string(flags_1.flags.password),
    message: core_1.Flags.string(flags_1.flags.message),
    pretty: flags_1.flagsWithParser.pretty,
    stringify: core_1.Flags.boolean({
        description: 'Display encrypted message in stringified format',
        char: 's',
    }),
};
exports.EncryptCommand = EncryptCommand;
//# sourceMappingURL=encrypt.js.map