"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecryptCommand = void 0;
const cryptography_1 = require("@klayr/cryptography");
const core_1 = require("@oclif/core");
const flags_1 = require("../../../utils/flags");
const reader_1 = require("../../../utils/reader");
class DecryptCommand extends core_1.Command {
    async run() {
        const { args, flags: { password: passwordSource, message: messageSource }, } = await this.parse(DecryptCommand);
        const { message } = args;
        const password = passwordSource !== null && passwordSource !== void 0 ? passwordSource : (await (0, reader_1.getPassphraseFromPrompt)('password'));
        const dataFromSource = messageSource && (0, reader_1.isFileSource)(messageSource)
            ? await (0, reader_1.readFileSource)(messageSource)
            : messageSource;
        if (!message && !dataFromSource) {
            this.error('Message must be provided through the argument or the flag ');
        }
        const encryptedMessage = message !== null && message !== void 0 ? message : dataFromSource;
        let parsedMessage;
        try {
            parsedMessage = JSON.parse(encryptedMessage);
        }
        catch (error) {
            parsedMessage = cryptography_1.encrypt.parseEncryptedMessage(encryptedMessage);
        }
        const result = await cryptography_1.encrypt.decryptMessageWithPassword(parsedMessage, password, 'utf-8');
        this.log(result);
    }
}
DecryptCommand.args = [
    {
        name: 'message',
        description: 'Encrypted message.',
    },
];
DecryptCommand.description = `
	Decrypts a previously encrypted message using your the password used to encrypt.
	`;
DecryptCommand.examples = ['message:decrypt '];
DecryptCommand.flags = {
    password: flags_1.flagsWithParser.password,
    message: core_1.Flags.string(flags_1.flags.message),
};
exports.DecryptCommand = DecryptCommand;
//# sourceMappingURL=decrypt.js.map