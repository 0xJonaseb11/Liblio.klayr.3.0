"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignCommand = void 0;
const cryptography_1 = require("@klayr/cryptography");
const core_1 = require("@oclif/core");
const base_1 = require("../../../base");
const error_1 = require("../../../utils/error");
const flags_1 = require("../../../utils/flags");
const reader_1 = require("../../../utils/reader");
const processInputs = (passphrase, message) => {
    if (!message) {
        throw new error_1.ValidationError('No message was provided.');
    }
    const keys = cryptography_1.legacy.getPrivateAndPublicKeyFromPassphrase(passphrase);
    const signedMessageWithOnePassphrase = cryptography_1.ed.signMessageWithPrivateKey(message, keys.privateKey);
    return {
        ...signedMessageWithOnePassphrase,
        publicKey: signedMessageWithOnePassphrase.publicKey.toString('hex'),
        signature: signedMessageWithOnePassphrase.signature.toString('hex'),
    };
};
class SignCommand extends base_1.default {
    async run() {
        const { args, flags: { passphrase: passphraseSource, message: messageSource }, } = await this.parse(SignCommand);
        const { message } = args;
        if (!message && !messageSource) {
            throw new error_1.ValidationError('No message was provided.');
        }
        const passphrase = passphraseSource !== null && passphraseSource !== void 0 ? passphraseSource : (await (0, reader_1.getPassphraseFromPrompt)('passphrase'));
        const dataFromSource = messageSource && (0, reader_1.isFileSource)(messageSource)
            ? await (0, reader_1.readFileSource)(messageSource)
            : messageSource;
        const result = processInputs(passphrase, message !== null && message !== void 0 ? message : dataFromSource);
        this.print(result);
    }
}
SignCommand.args = [
    {
        name: 'message',
        description: 'Message to sign.',
    },
];
SignCommand.description = `
	Signs a message using your secret passphrase.
	`;
SignCommand.examples = ['message:sign "Hello world"'];
SignCommand.flags = {
    ...base_1.default.flags,
    passphrase: core_1.Flags.string(flags_1.flags.passphrase),
    message: core_1.Flags.string(flags_1.flags.message),
};
exports.SignCommand = SignCommand;
//# sourceMappingURL=sign.js.map