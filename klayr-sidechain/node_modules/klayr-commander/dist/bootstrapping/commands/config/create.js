"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateCommand = void 0;
const core_1 = require("@oclif/core");
const os_1 = require("os");
const fs = require("fs-extra");
const path_1 = require("path");
const inquirer = require("inquirer");
const validator_1 = require("@klayr/validator");
const config_1 = require("../../../utils/config");
const output_1 = require("../../../utils/output");
class CreateCommand extends core_1.Command {
    async run() {
        const { flags: { output, label, 'chain-id': chainID }, } = await this.parse(CreateCommand);
        const regexWhitespace = /\s/g;
        const regexCamelCase = /^([a-z]+)(([A-Z]([a-z]+))+)$/;
        if (regexCamelCase.test(output) || regexWhitespace.test(output)) {
            this.error('Invalid name');
        }
        if (!(0, validator_1.isHexString)(chainID) || chainID.length !== 8) {
            this.error('Invalid chain ID format. ChainID must be in hex format with 8 characters');
        }
        const configPath = (0, path_1.resolve)(output);
        const filePath = (0, path_1.join)(configPath, 'config');
        config_1.defaultConfig.system.dataPath = (0, path_1.join)((0, os_1.homedir)(), '.klayr', label);
        config_1.defaultConfig.genesis.chainID = chainID;
        if (fs.existsSync(filePath)) {
            const userResponse = await inquirer.prompt({
                type: 'confirm',
                name: 'confirm',
                message: 'A config file already exists at the given location. Do you want to overwrite it?',
            });
            if (!userResponse.confirm) {
                this.error('Operation cancelled, config file already present at the desired location');
            }
            else {
                const res = await (0, output_1.handleOutputFlag)(configPath, config_1.defaultConfig, 'config');
                this.log(res);
            }
        }
        else {
            fs.mkdirSync(configPath, { recursive: true });
            const res = await (0, output_1.handleOutputFlag)(configPath, config_1.defaultConfig, 'config');
            this.log(res);
        }
    }
}
CreateCommand.description = 'Creates network configuration file.';
CreateCommand.examples = [
    'config:create --output mydir',
    'config:create --output mydir --label beta-sdk-app',
    'config:create --output mydir --label beta-sdk-app --community-identifier sdk',
];
CreateCommand.flags = {
    output: core_1.Flags.string({
        char: 'o',
        description: 'Directory where the config file is saved',
        default: process.cwd(),
    }),
    label: core_1.Flags.string({
        char: 'l',
        description: 'App Label',
        default: 'beta-sdk-app',
    }),
    'chain-id': core_1.Flags.string({
        char: 'i',
        description: 'ChainID in hex format. For example, Klayr mainnet mainchain is 00000000',
        required: true,
    }),
};
exports.CreateCommand = CreateCommand;
//# sourceMappingURL=create.js.map