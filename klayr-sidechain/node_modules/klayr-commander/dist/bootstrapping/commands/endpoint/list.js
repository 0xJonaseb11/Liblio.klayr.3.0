"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListCommand = void 0;
const core_1 = require("@oclif/core");
const base_ipc_client_1 = require("../base_ipc_client");
class ListCommand extends base_ipc_client_1.BaseIPCClientCommand {
    async run() {
        const { args, flags } = await this.parse(ListCommand);
        if (!this._client) {
            this.error('APIClient is not initialized.');
        }
        let modules;
        let result;
        if (flags.module === undefined) {
            modules = this._client.metadata;
        }
        else {
            modules = this._client.metadata.filter(moduleData => moduleData.name.match(flags.module));
        }
        const initialValue = [];
        if (args.endpoint !== undefined) {
            const searchExpression = new RegExp(args.endpoint, 'i');
            result = modules.reduce((aggregatedResult, klayrmodule) => {
                const endpoints = klayrmodule.endpoints
                    .filter(endpoint => endpoint.name.match(searchExpression))
                    .map(endpoint => ({ ...endpoint, name: `${klayrmodule.name}_${endpoint.name}` }));
                return aggregatedResult.concat(endpoints);
            }, initialValue);
        }
        else {
            result = modules.reduce((aggregatedResult, klayrmodule) => aggregatedResult.concat(klayrmodule.endpoints.map(endpoint => ({
                ...endpoint,
                name: `${klayrmodule.name}_${endpoint.name}`,
            }))), initialValue);
        }
        if (flags.info) {
            this.printJSON(result);
        }
        else {
            this.printJSON(result.map(item => item.name));
        }
    }
}
ListCommand.description = 'Lists registered endpoints.';
ListCommand.examples = [
    'endpoint:list',
    'endpoint:list {endpoint} -m {module}',
    'endpoint:list {endpoint} -m {module} -i',
    'endpoint:list -m validator',
    'endopint:list getBalance',
    'endpoint:list get -m token ',
    'endpoint:list getBalances -m token -i --pretty',
    'endpoint:list getBalances -m token -d ~/.klayr/pos-mainchain',
];
ListCommand.args = [
    {
        name: 'endpoint',
        description: 'Endpoint name (Optional)',
        required: false,
    },
];
ListCommand.flags = {
    ...base_ipc_client_1.BaseIPCClientCommand.flags,
    module: core_1.Flags.string({
        char: 'm',
        description: 'Parent module.',
    }),
    info: core_1.Flags.boolean({
        char: 'i',
        description: 'Prints additional info; Request and Response objects.',
    }),
};
exports.ListCommand = ListCommand;
//# sourceMappingURL=list.js.map