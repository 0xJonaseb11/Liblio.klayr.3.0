"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptCommand = void 0;
const core_1 = require("@oclif/core");
const commons_1 = require("../../../utils/commons");
const flags_1 = require("../../../utils/flags");
const reader_1 = require("../../../utils/reader");
const output_1 = require("../../../utils/output");
const outputPublicKeyOptionDescription = 'Includes the public key in the output. This option is provided for the convenience of node operators.';
class EncryptCommand extends core_1.Command {
    async run() {
        const { flags: { passphrase: passphraseSource, password: passwordSource, 'output-public-key': outputPublicKey, output, }, } = await this.parse(EncryptCommand);
        const passphrase = passphraseSource !== null && passphraseSource !== void 0 ? passphraseSource : (await (0, reader_1.getPassphraseFromPrompt)('passphrase', true));
        const password = passwordSource !== null && passwordSource !== void 0 ? passwordSource : (await (0, reader_1.getPasswordFromPrompt)('password', true));
        const result = await (0, commons_1.encryptPassphrase)(passphrase, password, outputPublicKey);
        if (output) {
            const res = await (0, output_1.handleOutputFlag)(output, result, 'passphrase');
            this.log(res);
        }
        else {
            this.log(JSON.stringify(result, undefined, '  '));
        }
    }
}
EncryptCommand.description = 'Encrypt secret passphrase using password.';
EncryptCommand.examples = [
    'passphrase:encrypt',
    'passphrase:encrypt --passphrase your-passphrase --output /mypath/keys.json',
    'passphrase:encrypt --password your-password',
    'passphrase:encrypt --password your-password --passphrase your-passphrase --output /mypath/keys.json',
    'passphrase:encrypt --output-public-key --output /mypath/keys.json',
];
EncryptCommand.flags = {
    password: flags_1.flagsWithParser.password,
    passphrase: flags_1.flagsWithParser.passphrase,
    'output-public-key': core_1.Flags.boolean({
        description: outputPublicKeyOptionDescription,
    }),
    output: core_1.Flags.string({
        char: 'o',
        description: 'The output directory. Default will set to current working directory.',
    }),
};
exports.EncryptCommand = EncryptCommand;
//# sourceMappingURL=encrypt.js.map