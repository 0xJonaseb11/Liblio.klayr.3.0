"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResetCommand = void 0;
const fs = require("fs-extra");
const core_1 = require("@oclif/core");
const inquirer = require("inquirer");
const path_1 = require("../../../utils/path");
const flags_1 = require("../../../utils/flags");
const application_1 = require("../../../utils/application");
class ResetCommand extends core_1.Command {
    async run() {
        var _a;
        const { flags } = await this.parse(ResetCommand);
        const dataPath = flags['data-path']
            ? flags['data-path']
            : (0, path_1.getDefaultPath)(this.config.pjson.name);
        const skipPrompt = (_a = flags.yes) !== null && _a !== void 0 ? _a : false;
        if ((0, application_1.isApplicationRunning)(dataPath)) {
            const errorMessage = `Can't reset db while running application. Application at data path ${dataPath} is running with pid ${(0, application_1.getPid)(dataPath)}.`;
            this.error(errorMessage);
        }
        if (!skipPrompt) {
            const { answer } = await inquirer.prompt([
                {
                    name: 'answer',
                    message: 'Are you sure you want to reset the db?',
                    type: 'list',
                    choices: ['yes', 'no'],
                },
            ]);
            if (answer === 'no') {
                return;
            }
        }
        fs.removeSync((0, path_1.getBlockchainDBPath)(dataPath));
        fs.removeSync((0, path_1.getStateDBPath)(dataPath));
        fs.removeSync((0, path_1.getModuleDBPath)(dataPath));
        this.log('Blockchain data has been reset.');
    }
}
ResetCommand.description = 'Reset the blockchain data.';
ResetCommand.examples = [
    'blockchain:reset',
    'blockchain:reset --data-path ./klayr',
    'blockchain:reset --yes',
];
ResetCommand.flags = {
    'data-path': flags_1.flagsWithParser.dataPath,
    yes: core_1.Flags.boolean({
        char: 'y',
        description: 'Skip confirmation prompt.',
    }),
};
exports.ResetCommand = ResetCommand;
//# sourceMappingURL=reset.js.map