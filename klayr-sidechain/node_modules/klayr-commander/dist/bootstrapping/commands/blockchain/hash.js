"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HashCommand = void 0;
const crypto = require("crypto");
const core_1 = require("@oclif/core");
const path_1 = require("../../../utils/path");
const application_1 = require("../../../utils/application");
const db_1 = require("../../../utils/db");
const flags_1 = require("../../../utils/flags");
class HashCommand extends core_1.Command {
    async run() {
        const { flags } = await this.parse(HashCommand);
        const dataPath = flags['data-path']
            ? flags['data-path']
            : (0, path_1.getDefaultPath)(this.config.pjson.name);
        const blockchainPath = (0, path_1.getBlockchainDBPath)(dataPath);
        if ((0, application_1.isApplicationRunning)(dataPath)) {
            const errorMessage = `Can't generate hash for a running application. Application at data path ${dataPath} is running with pid ${(0, application_1.getPid)(dataPath)}.`;
            this.error(errorMessage);
            return;
        }
        this.debug('Compressing data to generate hash.');
        this.debug(`   ${(0, path_1.getFullPath)(blockchainPath)}`);
        const db = (0, db_1.getBlockchainDB)(dataPath);
        const stream = db.createReadStream({});
        const dbHash = crypto.createHash('sha256');
        const hash = await new Promise((resolve, reject) => {
            stream.on('data', ({ value }) => {
                dbHash.update(value);
            });
            stream.on('error', error => {
                reject(error);
            });
            stream.on('end', () => {
                resolve(dbHash.digest());
            });
        });
        this.debug('Hash generation completed.');
        this.log(hash.toString('hex'));
        db.close();
    }
}
HashCommand.description = 'Generate SHA256 hash from <PATH>.';
HashCommand.examples = ['blockchain:hash', 'blockchain:hash --data-path ./data'];
HashCommand.flags = {
    'data-path': flags_1.flagsWithParser.dataPath,
};
exports.HashCommand = HashCommand;
//# sourceMappingURL=hash.js.map