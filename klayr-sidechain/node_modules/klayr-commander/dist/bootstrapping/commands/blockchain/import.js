"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportCommand = void 0;
const fs = require("fs-extra");
const path = require("path");
const core_1 = require("@oclif/core");
const path_1 = require("../../../utils/path");
const download_1 = require("../../../utils/download");
const flags_1 = require("../../../utils/flags");
class ImportCommand extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(ImportCommand);
        const { filepath } = args;
        const dataPath = flags['data-path']
            ? flags['data-path']
            : (0, path_1.getDefaultPath)(this.config.pjson.name);
        const blockchainDBPath = (0, path_1.getBlockchainDBPath)(dataPath);
        const stateDBPath = (0, path_1.getStateDBPath)(dataPath);
        const outputPath = path.join(dataPath, 'data');
        if (path.extname(filepath) !== '.gz') {
            this.error('The blockchain data file must be a gzip file.');
        }
        if (fs.existsSync(blockchainDBPath)) {
            if (!flags.force) {
                this.error(`There is already a blockchain data file found at ${dataPath}. Use --force to override.`);
            }
            fs.removeSync(blockchainDBPath);
        }
        if (fs.existsSync(stateDBPath)) {
            if (!flags.force) {
                this.error(`There is already a state data file found at ${dataPath}. Use --force to override.`);
            }
            fs.removeSync(stateDBPath);
        }
        fs.ensureDirSync(outputPath);
        this.log(`Importing blockchain from ${(0, path_1.getFullPath)(filepath)}`);
        await (0, download_1.extract)(path.dirname(filepath), path.basename(filepath), outputPath);
        this.log('Import completed.');
        this.log(`   ${(0, path_1.getFullPath)(outputPath)}`);
    }
}
ImportCommand.description = 'Import from <FILE>.';
ImportCommand.args = [
    {
        name: 'filepath',
        required: true,
        description: 'Path to the gzipped blockchain data.',
    },
];
ImportCommand.examples = [
    'blockchain:import ./path/to/blockchain.tar.gz',
    'blockchain:import ./path/to/blockchain.tar.gz --data-path ./klayr/',
    'blockchain:import ./path/to/blockchain.tar.gz --data-path ./klayr/ --force',
];
ImportCommand.flags = {
    'data-path': flags_1.flagsWithParser.dataPath,
    force: core_1.Flags.boolean({
        char: 'f',
        description: 'Delete and overwrite existing blockchain data',
        default: false,
    }),
};
exports.ImportCommand = ImportCommand;
//# sourceMappingURL=import.js.map