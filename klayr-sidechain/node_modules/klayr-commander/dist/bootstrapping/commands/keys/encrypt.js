"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptCommand = void 0;
const codec_1 = require("@klayr/codec");
const cryptography_1 = require("@klayr/cryptography");
const core_1 = require("@oclif/core");
const fs = require("fs-extra");
const flags_1 = require("../../../utils/flags");
const reader_1 = require("../../../utils/reader");
const constants_1 = require("../../../constants");
class EncryptCommand extends core_1.Command {
    async run() {
        var _a;
        const { flags } = await this.parse(EncryptCommand);
        const password = (_a = flags.password) !== null && _a !== void 0 ? _a : (await (0, reader_1.getPasswordFromPrompt)('password', true));
        const keysWithoutEncryption = fs.readJSONSync(flags['file-path']);
        const keys = [];
        for (const keyWithoutEncryption of keysWithoutEncryption.keys) {
            const plainGeneratorKeyData = {
                generatorKey: Buffer.from(keyWithoutEncryption.plain.generatorKey, 'hex'),
                generatorPrivateKey: Buffer.from(keyWithoutEncryption.plain.generatorPrivateKey, 'hex'),
                blsKey: Buffer.from(keyWithoutEncryption.plain.blsKey, 'hex'),
                blsPrivateKey: Buffer.from(keyWithoutEncryption.plain.blsPrivateKey, 'hex'),
            };
            const encodedGeneratorKeys = codec_1.codec.encode(constants_1.plainGeneratorKeysSchema, plainGeneratorKeyData);
            const encryptedMessageObject = await cryptography_1.encrypt.encryptMessageWithPassword(encodedGeneratorKeys, password);
            keys.push({
                ...keyWithoutEncryption,
                encrypted: encryptedMessageObject,
            });
        }
        fs.writeJSONSync(flags['file-path'], { keys }, { spaces: ' ', mode: constants_1.OWNER_READ_WRITE });
    }
}
EncryptCommand.description = 'Encrypt keys from a file and overwrite the file';
EncryptCommand.examples = [
    'keys:encrypt --file-path ./my/path/keys.json',
    'keys:encrypt --file-path ./my/path/keys.json --password mypass',
];
EncryptCommand.flags = {
    'file-path': core_1.Flags.string({
        char: 'f',
        description: 'Path of the file to encrypt from',
        required: true,
    }),
    password: flags_1.flagsWithParser.password,
};
exports.EncryptCommand = EncryptCommand;
//# sourceMappingURL=encrypt.js.map