"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnableCommand = void 0;
const core_1 = require("@oclif/core");
const base_generator_1 = require("../base_generator");
class EnableCommand extends base_generator_1.BaseGeneratorCommand {
    async run() {
        const { args, flags } = await this.parse(EnableCommand);
        const { address } = args;
        const { 'use-status-value': useStatusValue } = flags;
        let { height, 'max-height-generated': maxHeightGenerated, 'max-height-prevoted': maxHeightPrevoted, } = flags;
        if (!useStatusValue &&
            [height, maxHeightGenerated, maxHeightPrevoted].some(v => typeof v !== 'number')) {
            throw new Error('All of the following must be provided: --height, --max-height-generated, --max-height-prevoted');
        }
        const password = await this.getPassword(flags);
        if (!this._client) {
            this.error('APIClient is not initialized.');
        }
        if (useStatusValue) {
            const statusList = await this._client.invoke('generator_getStatus');
            const foundStatus = statusList.status.find(s => s.address === address);
            if (!foundStatus) {
                throw new Error(`Status for ${address} not found in the node.`);
            }
            height = foundStatus.height;
            maxHeightGenerated = foundStatus.maxHeightGenerated;
            maxHeightPrevoted = foundStatus.maxHeightPrevoted;
        }
        await this._client.invoke('generator_updateStatus', {
            address,
            password,
            enable: true,
            height: Number(height !== null && height !== void 0 ? height : 0),
            maxHeightGenerated: Number(maxHeightGenerated !== null && maxHeightGenerated !== void 0 ? maxHeightGenerated : 0),
            maxHeightPrevoted: Number(maxHeightPrevoted !== null && maxHeightPrevoted !== void 0 ? maxHeightPrevoted : 0),
        });
        this.log(`Enabled block generation for ${address}`);
    }
}
EnableCommand.description = 'Enable block generation for given validator address.';
EnableCommand.examples = [
    'generator:enable lsk24cd35u4jdq8szo3pnsqe5dsxwrnazyqqqg5eu --use-status-value',
    'generator:enable lsk24cd35u4jdq8szo3pnsqe5dsxwrnazyqqqg5eu --height=100 --max-height-generated=30 --max-height-prevoted=10',
    'generator:enable lsk24cd35u4jdq8szo3pnsqe5dsxwrnazyqqqg5eu --height=100 --max-height-generated=30 --max-height-prevoted=10 --data-path ./data',
    'generator:enable lsk24cd35u4jdq8szo3pnsqe5dsxwrnazyqqqg5eu --height=100 --max-height-generated=30 --max-height-prevoted=10 --data-path ./data --password your_password',
];
EnableCommand.flags = {
    ...base_generator_1.BaseGeneratorCommand.flags,
    height: core_1.Flags.integer({
        description: 'Last generated block height.',
        exclusive: ['use-status-value'],
        min: 0,
    }),
    'max-height-generated': core_1.Flags.integer({
        description: "Validator's largest previously generated height.",
        exclusive: ['use-status-value'],
        min: 0,
    }),
    'max-height-prevoted': core_1.Flags.integer({
        description: "Validator's largest prevoted height for a block.",
        exclusive: ['use-status-value'],
        min: 0,
    }),
    'use-status-value': core_1.Flags.boolean({
        description: 'Use status value from the connected node',
        exclusive: ['height', 'max-height-generated', 'max-height-prevoted'],
    }),
};
EnableCommand.args = [...base_generator_1.BaseGeneratorCommand.args];
exports.EnableCommand = EnableCommand;
//# sourceMappingURL=enable.js.map