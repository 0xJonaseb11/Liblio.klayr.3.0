"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleCommand = void 0;
const repl_1 = require("repl");
const core_1 = require("@oclif/core");
const apiClient = require("@klayr/api-client");
const klayr = require("@klayr/client");
class ConsoleCommand extends core_1.Command {
    async run() {
        const { flags } = await this.parse(ConsoleCommand);
        this.log('Entering Klayr REPL: type `Ctrl+C` or `.exit` to exit');
        const options = { prompt: `${this.config.pjson.name} > ` };
        const replServer = (0, repl_1.start)(options);
        await this.initREPLContext(replServer, flags);
        replServer.on('reset', async () => {
            this.log('Initializing repl context after reset!');
            await this.initREPLContext(replServer, flags);
        });
        replServer.on('exit', () => {
            this.log('Received "exit" event from klayr!');
            process.exit();
        });
    }
    async initREPLContext(replServer, flags) {
        Object.defineProperty(replServer.context, 'klayr', {
            enumerable: true,
            value: klayr,
        });
        if (flags['api-ipc']) {
            const ipcClient = await apiClient.createIPCClient(flags['api-ipc']);
            Object.defineProperty(replServer.context, 'client', {
                enumerable: true,
                value: ipcClient,
            });
        }
        if (flags['api-ws']) {
            const wsClient = await apiClient.createWSClient(flags['api-ws']);
            Object.defineProperty(replServer.context, 'client', {
                enumerable: true,
                value: wsClient,
            });
        }
    }
}
ConsoleCommand.description = 'Klayr interactive REPL session to run commands.';
ConsoleCommand.examples = [
    'console',
    'console --api-ws=ws://localhost:8080',
    'console --api-ipc=/path/to/server',
];
ConsoleCommand.flags = {
    'api-ipc': core_1.Flags.string({
        description: 'Enable api-client with IPC communication.',
        exclusive: ['api-ws'],
    }),
    'api-ws': core_1.Flags.string({
        description: 'Enable api-client with Websocket communication.',
        exclusive: ['api-ipc'],
    }),
};
exports.ConsoleCommand = ConsoleCommand;
//# sourceMappingURL=console.js.map