"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const ts_morph_1 = require("ts-morph");
const Generator = require("yeoman-generator");
const convert_1 = require("../../../../utils/convert");
class PluginGenerator extends Generator {
    constructor(args, opts) {
        super(args, opts);
        this._templatePath = (0, path_1.join)(__dirname, '..', 'templates', 'plugin');
        this._name = this.options.name;
        this._pluginFileName = (0, convert_1.camelToSnake)(this._name);
        this._className = `${this._name.charAt(0).toUpperCase() + this._name.slice(1)}Plugin`;
    }
    async prompting() {
        try {
            this._packageJSON = await Promise.resolve(`${this.destinationPath('package.json')}`).then(s => require(s));
        }
        catch (err) {
            this._packageJSON = undefined;
        }
        this._answers = this._packageJSON
            ? undefined
            : (await this.prompt([
                {
                    type: 'input',
                    name: 'name',
                    message: 'Name of plugin',
                },
            ]));
    }
    writing() {
        this.fs.copyTpl(`${this._templatePath}/src/app/plugins/plugin.ts`, this.destinationPath(`src/app/plugins/${this._pluginFileName}/${this._pluginFileName}_plugin.ts`), {
            className: this._className,
            name: this._name,
        }, {}, { globOptions: { dot: true, ignore: ['.DS_Store'] } });
        this.fs.copyTpl(`${this._templatePath}/test/unit/plugins/plugin.spec.ts`, this.destinationPath(`test/unit/plugins/${this._pluginFileName}/${this._pluginFileName}_plugin.spec.ts`), {
            name: this._name,
            className: this._className,
        }, {}, { globOptions: { dot: true, ignore: ['.DS_Store'] } });
    }
    async registerPlugin() {
        this.log('Registering plugin...');
        const project = new ts_morph_1.Project();
        project.addSourceFilesAtPaths('src/app/**/*.ts');
        const pluginsFile = project.getSourceFileOrThrow('src/app/plugins.ts');
        pluginsFile.addImportDeclaration({
            namedImports: [`${this._className}`],
            moduleSpecifier: `./plugins/${this._pluginFileName}/${this._pluginFileName}_plugin`,
        });
        const registerFunction = pluginsFile
            .getVariableDeclarationOrThrow('registerPlugins')
            .getInitializerIfKindOrThrow(ts_morph_1.SyntaxKind.ArrowFunction);
        registerFunction.setBodyText(`${registerFunction.getBodyText()}\napp.registerPlugin(new ${this._className}());`);
        pluginsFile.organizeImports();
        await pluginsFile.save();
    }
}
exports.default = PluginGenerator;
//# sourceMappingURL=plugin_generator.js.map