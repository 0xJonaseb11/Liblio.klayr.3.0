"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const path_1 = require("path");
const fs = require("fs-extra");
const Generator = require("yeoman-generator");
const validator_1 = require("@klayr/validator");
const passphrase_1 = require("@klayr/passphrase");
const genesis_creation_1 = require("../../../../utils/genesis_creation");
const constants_1 = require("../../../../constants");
class InitGenerator extends Generator {
    async prompting() {
        this.answers = (await this.prompt([
            {
                type: 'input',
                name: 'name',
                message: 'Application name',
                default: (0, path_1.basename)(this.destinationRoot()),
            },
            {
                type: 'input',
                name: 'chainID',
                message: 'Chain ID in hex representation. ChainID must be 4 bytes (8 characters)',
                validate: (input) => (0, validator_1.isHexString)(input) && (input === null || input === void 0 ? void 0 : input.length) === 8,
            },
            {
                type: 'input',
                name: 'description',
                message: 'Application description',
                default: 'Klayr-SDK Application',
            },
            {
                type: 'input',
                name: 'author',
                message: 'Author',
                default: (0, os_1.userInfo)().username,
            },
            {
                type: 'input',
                name: 'license',
                message: 'License',
                default: 'ISC',
            },
        ]));
    }
    createSkeleton() {
        const templatePath = (0, path_1.join)(__dirname, '..', 'templates');
        this.fs.copyTpl(`${templatePath}/init/**/*`, this.destinationRoot(), {
            appName: this.answers.name,
            appDescription: this.answers.description,
            author: this.answers.author,
            license: this.answers.license,
        }, {}, { globOptions: { dot: true, ignore: ['.DS_Store'] } });
        this.fs.move(this.destinationPath('package-template.json'), this.destinationPath('package.json'));
        this.fs.move(this.destinationPath('.gitignore-template'), this.destinationPath('.gitignore'));
    }
    end() {
        this.spawnCommandSync('npm', ['run', 'build']);
        this.log('Generating genesis block and config.', this.destinationRoot());
        this.spawnCommandSync(`${this.destinationPath('bin/run')}`, [
            'config:create',
            '--chain-id',
            this.answers.chainID,
            '--output',
            'config/default',
            '--label',
            this.answers.name,
        ]);
        const passphrase = passphrase_1.Mnemonic.generateMnemonic(256);
        fs.writeJsonSync(this.destinationPath('config/default/passphrase.json'), { passphrase }, {
            spaces: '\t',
            mode: constants_1.OWNER_READ_WRITE,
        });
        this.spawnCommandSync(`${this.destinationPath('bin/run')}`, [
            'keys:create',
            '--output',
            'config/default/dev-validators.json',
            '--no-encrypt',
            '--count',
            '53',
            '--passphrase',
            passphrase,
        ]);
        const { keys } = JSON.parse(fs.readFileSync(`${this.destinationPath('config/default/dev-validators.json')}`, 'utf8'));
        const { genesisAssets } = (0, genesis_creation_1.generateGenesisBlockDefaultPoSAssets)({
            chainID: this.answers.chainID,
            keysList: keys,
            numberOfValidators: 51,
            tokenDistribution: BigInt('100000000000000'),
        });
        fs.writeJsonSync(this.destinationPath('config/default/genesis_assets.json'), { assets: genesisAssets }, {
            spaces: '\t',
            mode: constants_1.OWNER_READ_WRITE,
        });
        const createdConfig = fs.readJSONSync(this.destinationPath('config/default/config.json'));
        createdConfig.generator = {
            keys: {
                fromFile: './config/dev-validators.json',
            },
        };
        fs.writeJSONSync(this.destinationPath('config/default/config.json'), createdConfig, {
            spaces: '\t',
            mode: constants_1.OWNER_READ_WRITE,
        });
        this.spawnCommandSync(`${this.destinationPath('bin/run')}`, [
            'genesis-block:create',
            '--output',
            'config/default',
            '--assets-file',
            'config/default/genesis_assets.json',
        ]);
        this.log('\nRun below command to start your blockchain app.\n');
        this.log(`cd ${this.destinationRoot()}; ./bin/run start`);
    }
}
exports.default = InitGenerator;
//# sourceMappingURL=init_generator.js.map