"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deriveKeypair = exports.encryptPassphrase = exports.klayrsnapshotUrl = void 0;
const cryptography = require("@klayr/cryptography");
const constants_1 = require("../constants");
const klayrsnapshotUrl = (url, network) => {
    if (!['testnet', 'mainnet', 'betanet', 'default'].includes(network.toLowerCase())) {
        return '';
    }
    if (url && url.search(constants_1.RELEASE_URL) >= 0) {
        return `${constants_1.RELEASE_URL}/${network}/blockchain.db.tar.gz`;
    }
    return url;
};
exports.klayrsnapshotUrl = klayrsnapshotUrl;
const encryptPassphrase = async (passphrase, password, outputPublicKey) => {
    const encryptedPassphrase = await cryptography.encrypt.encryptMessageWithPassword(passphrase, password);
    return outputPublicKey
        ? {
            encryptedPassphrase,
            publicKey: cryptography.legacy.getKeys(passphrase).publicKey.toString('hex'),
        }
        : { encryptedPassphrase };
};
exports.encryptPassphrase = encryptPassphrase;
const deriveKeypair = async (passphrase, keyDerivationPath) => {
    if (keyDerivationPath === 'legacy') {
        return cryptography.legacy.getPrivateAndPublicKeyFromPassphrase(passphrase);
    }
    const privateKey = await cryptography.ed.getPrivateKeyFromPhraseAndPath(passphrase, keyDerivationPath);
    const publicKey = cryptography.ed.getPublicKeyFromPrivateKey(privateKey);
    return {
        publicKey,
        privateKey,
    };
};
exports.deriveKeypair = deriveKeypair;
//# sourceMappingURL=commons.js.map