import { Schema } from '@klayr/codec';
export declare const genesisAssetsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        assets: {
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    module: {
                        type: string;
                    };
                    data: {
                        type: string;
                    };
                    schema: {
                        type: string;
                    };
                };
            };
        };
    };
};
export interface GenesisAssetsInput {
    assets: {
        module: string;
        data: Record<string, unknown>;
        schema: Schema;
    }[];
}
interface Keys {
    address: string;
    keyPath: string;
    publicKey: string;
    privateKey: string;
    plain: {
        generatorKeyPath: string;
        generatorKey: string;
        generatorPrivateKey: string;
        blsKeyPath: string;
        blsKey: string;
        blsProofOfPossession: string;
        blsPrivateKey: string;
    };
}
interface GenesisBlockDefaultAccountInput {
    keysList: Keys[];
    chainID: string;
    tokenDistribution: bigint;
    numberOfValidators: number;
}
export declare const generateGenesisBlockDefaultPoSAssets: (input: GenesisBlockDefaultAccountInput) => {
    genesisAssets: ({
        module: string;
        data: Record<string, unknown>;
        schema: {
            $id: string;
            type: string;
            required: string[];
            properties: {
                userSubstore: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            address: {
                                dataType: string;
                                format: string;
                                fieldNumber: number;
                            };
                            tokenID: {
                                dataType: string;
                                fieldNumber: number;
                                minLength: number;
                                maxLength: number;
                            };
                            availableBalance: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            lockedBalances: {
                                type: string;
                                fieldNumber: number;
                                items: {
                                    type: string;
                                    required: string[];
                                    properties: {
                                        module: {
                                            dataType: string;
                                            minLength: number;
                                            maxLength: number;
                                            fieldNumber: number;
                                        };
                                        amount: {
                                            dataType: string;
                                            fieldNumber: number;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                supplySubstore: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            tokenID: {
                                dataType: string;
                                fieldNumber: number;
                                minLength: number;
                                maxLength: number;
                            };
                            totalSupply: {
                                dataType: string;
                                fieldNumber: number;
                            };
                        };
                    };
                };
                escrowSubstore: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            escrowChainID: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            tokenID: {
                                dataType: string;
                                fieldNumber: number;
                                minLength: number;
                                maxLength: number;
                            };
                            amount: {
                                dataType: string;
                                fieldNumber: number;
                            };
                        };
                    };
                };
                supportedTokensSubstore: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            chainID: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            supportedTokenIDs: {
                                type: string;
                                fieldNumber: number;
                                items: {
                                    dataType: string;
                                    minLength: number;
                                    maxLength: number;
                                };
                            };
                        };
                    };
                };
            };
        };
    } | {
        module: string;
        data: Record<string, unknown>;
        schema: {
            $id: string;
            type: string;
            required: string[];
            properties: {
                validators: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            address: {
                                dataType: string;
                                format: string;
                                fieldNumber: number;
                            };
                            name: {
                                dataType: string;
                                fieldNumber: number;
                                minLength: number;
                                maxLength: number;
                            };
                            blsKey: {
                                dataType: string;
                                fieldNumber: number;
                                minLength: number;
                                maxLength: number;
                            };
                            proofOfPossession: {
                                dataType: string;
                                fieldNumber: number;
                                minLength: number;
                                maxLength: number;
                            };
                            generatorKey: {
                                dataType: string;
                                fieldNumber: number;
                                minLength: number;
                                maxLength: number;
                            };
                            lastGeneratedHeight: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            isBanned: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            reportMisbehaviorHeights: {
                                type: string;
                                fieldNumber: number;
                                items: {
                                    dataType: string;
                                };
                            };
                            consecutiveMissedBlocks: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            commission: {
                                dataType: string;
                                fieldNumber: number;
                                maximum: number;
                            };
                            lastCommissionIncreaseHeight: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            sharingCoefficients: {
                                type: string;
                                fieldNumber: number;
                                items: {
                                    type: string;
                                    required: string[];
                                    properties: {
                                        tokenID: {
                                            dataType: string;
                                            minLength: number;
                                            maxLength: number;
                                            fieldNumber: number;
                                        };
                                        coefficient: {
                                            dataType: string;
                                            maxLength: number;
                                            fieldNumber: number;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                stakers: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            address: {
                                dataType: string;
                                format: string;
                                fieldNumber: number;
                            };
                            stakes: {
                                type: string;
                                fieldNumber: number;
                                items: {
                                    type: string;
                                    required: string[];
                                    properties: {
                                        validatorAddress: {
                                            dataType: string;
                                            format: string;
                                            fieldNumber: number;
                                        };
                                        amount: {
                                            dataType: string;
                                            fieldNumber: number;
                                        };
                                        sharingCoefficients: {
                                            type: string;
                                            fieldNumber: number;
                                            items: {
                                                type: string;
                                                required: string[];
                                                properties: {
                                                    tokenID: {
                                                        dataType: string;
                                                        minLength: number;
                                                        maxLength: number;
                                                        fieldNumber: number;
                                                    };
                                                    coefficient: {
                                                        dataType: string;
                                                        maxLength: number;
                                                        fieldNumber: number;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            pendingUnlocks: {
                                type: string;
                                fieldNumber: number;
                                items: {
                                    type: string;
                                    required: string[];
                                    properties: {
                                        validatorAddress: {
                                            dataType: string;
                                            fieldNumber: number;
                                            format: string;
                                        };
                                        amount: {
                                            dataType: string;
                                            fieldNumber: number;
                                        };
                                        unstakeHeight: {
                                            dataType: string;
                                            fieldNumber: number;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                genesisData: {
                    type: string;
                    fieldNumber: number;
                    required: string[];
                    properties: {
                        initRounds: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        initValidators: {
                            type: string;
                            fieldNumber: number;
                            items: {
                                dataType: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    } | {
        module: string;
        data: {
            ownChainName: string;
            ownChainNonce: number;
            chainInfos: never[];
            terminatedStateAccounts: never[];
            terminatedOutboxAccounts: never[];
        };
        schema: {
            $id: string;
            type: string;
            required: string[];
            properties: {
                ownChainName: {
                    dataType: string;
                    maxLength: number;
                    fieldNumber: number;
                };
                ownChainNonce: {
                    dataType: string;
                    fieldNumber: number;
                };
                chainInfos: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            chainID: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            chainData: {
                                fieldNumber: number;
                                $id: string;
                                type: string;
                                required: string[];
                                properties: {
                                    name: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                    lastCertificate: {
                                        type: string;
                                        fieldNumber: number;
                                        required: string[];
                                        properties: {
                                            height: {
                                                dataType: string;
                                                fieldNumber: number;
                                            };
                                            timestamp: {
                                                dataType: string;
                                                fieldNumber: number;
                                            };
                                            stateRoot: {
                                                dataType: string;
                                                minLength: number;
                                                maxLength: number;
                                                fieldNumber: number;
                                            };
                                            validatorsHash: {
                                                dataType: string;
                                                minLength: number;
                                                maxLength: number;
                                                fieldNumber: number;
                                            };
                                        };
                                    };
                                    status: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                };
                            };
                            channelData: {
                                fieldNumber: number;
                                $id: string;
                                type: string;
                                required: string[];
                                properties: {
                                    inbox: {
                                        type: string;
                                        fieldNumber: number;
                                        required: string[];
                                        properties: {
                                            appendPath: {
                                                type: string;
                                                items: {
                                                    dataType: string;
                                                    minLength: number;
                                                    maxLength: number;
                                                };
                                                fieldNumber: number;
                                            };
                                            size: {
                                                dataType: string;
                                                fieldNumber: number;
                                            };
                                            root: {
                                                dataType: string;
                                                minLength: number;
                                                maxLength: number;
                                                fieldNumber: number;
                                            };
                                        };
                                    };
                                    outbox: {
                                        type: string;
                                        fieldNumber: number;
                                        required: string[];
                                        properties: {
                                            appendPath: {
                                                type: string;
                                                items: {
                                                    dataType: string;
                                                    minLength: number;
                                                    maxLength: number;
                                                };
                                                fieldNumber: number;
                                            };
                                            size: {
                                                dataType: string;
                                                fieldNumber: number;
                                            };
                                            root: {
                                                dataType: string;
                                                minLength: number;
                                                maxLength: number;
                                                fieldNumber: number;
                                            };
                                        };
                                    };
                                    partnerChainOutboxRoot: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                    messageFeeTokenID: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                    minReturnFeePerByte: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                };
                            };
                            chainValidators: {
                                fieldNumber: number;
                                $id: string;
                                type: string;
                                required: string[];
                                properties: {
                                    activeValidators: {
                                        type: string;
                                        fieldNumber: number;
                                        minItems: number;
                                        maxItems: number;
                                        items: {
                                            type: string;
                                            required: string[];
                                            properties: {
                                                blsKey: {
                                                    dataType: string;
                                                    minLength: number;
                                                    maxLength: number;
                                                    fieldNumber: number;
                                                };
                                                bftWeight: {
                                                    dataType: string;
                                                    fieldNumber: number;
                                                };
                                            };
                                        };
                                    };
                                    certificateThreshold: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                };
                            };
                        };
                    };
                };
                terminatedStateAccounts: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            chainID: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            terminatedStateAccount: {
                                fieldNumber: number;
                                $id: string;
                                type: string;
                                required: string[];
                                properties: {
                                    stateRoot: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                    mainchainStateRoot: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                    initialized: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                };
                            };
                        };
                    };
                };
                terminatedOutboxAccounts: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            chainID: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            terminatedOutboxAccount: {
                                fieldNumber: number;
                                $id: string;
                                type: string;
                                required: string[];
                                properties: {
                                    outboxRoot: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                    outboxSize: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                    partnerChainInboxSize: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    })[];
};
export {};
