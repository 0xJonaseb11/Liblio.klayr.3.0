"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleOutputFlag = void 0;
const fs = require("fs-extra");
const path = require("path");
const os_1 = require("os");
const constants_1 = require("../constants");
async function getDefaultFilename(namespace) {
    return `${namespace}.json`;
}
function resolvePath(filePath) {
    if (filePath.startsWith('~')) {
        return path.join((0, os_1.homedir)(), filePath.slice(1));
    }
    return path.resolve(filePath);
}
async function handleOutput(options, namespace) {
    var _a, _b;
    const outputPath = (_a = options.outputPath) !== null && _a !== void 0 ? _a : process.cwd();
    const filename = (_b = options.filename) !== null && _b !== void 0 ? _b : (await getDefaultFilename(namespace));
    const resolvedPath = resolvePath(outputPath);
    const outputPathWithFilename = path.join(resolvedPath, filename);
    await fs.mkdir(resolvedPath, { recursive: true });
    return outputPathWithFilename;
}
async function handleOutputFlag(outputPath, data, namespace, filename) {
    if (path.extname(outputPath)) {
        const resolvedPath = resolvePath(outputPath);
        const resolvedPathWithFilename = path.join(resolvedPath, filename !== null && filename !== void 0 ? filename : '');
        try {
            fs.writeJSONSync(resolvedPathWithFilename, data, {
                spaces: ' ',
                mode: constants_1.OWNER_READ_WRITE,
            });
            return `Successfully written data to ${resolvedPathWithFilename}`;
        }
        catch (error) {
            throw new Error(`Error writing data to ${resolvedPathWithFilename}: ${error}`);
        }
    }
    const options = {
        outputPath,
        filename,
    };
    const outputFilePath = await handleOutput(options, namespace);
    try {
        fs.writeJSONSync(outputFilePath, data, {
            spaces: ' ',
            mode: constants_1.OWNER_READ_WRITE,
        });
        return `Successfully written data to ${outputFilePath}`;
    }
    catch (error) {
        throw new Error(`Error writing data to ${outputFilePath}: ${error}`);
    }
}
exports.handleOutputFlag = handleOutputFlag;
//# sourceMappingURL=output.js.map