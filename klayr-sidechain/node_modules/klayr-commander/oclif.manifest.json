{
  "commands": {
    "console": {
      "aliases": [],
      "args": {},
      "description": "Klayr interactive REPL session to run commands.",
      "examples": [
        "console",
        "console --api-ws=ws://localhost:8080",
        "console --api-ipc=/path/to/server"
      ],
      "flags": {
        "api-ipc": {
          "description": "Enable api-client with IPC communication.",
          "exclusive": [
            "api-ws"
          ],
          "name": "api-ipc",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "api-ws": {
          "description": "Enable api-client with Websocket communication.",
          "exclusive": [
            "api-ipc"
          ],
          "name": "api-ws",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "console",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "console.js"
      ]
    },
    "hash-onion": {
      "aliases": [],
      "args": {},
      "description": "Create hash onions to be used by the forger.",
      "examples": [
        "hash-onion --count=1000000 --distance=2000 --pretty",
        "hash-onion --count=1000000 --distance=2000 --output ~/my_onion.json"
      ],
      "flags": {
        "output": {
          "char": "o",
          "description": "Output file path",
          "name": "output",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "count": {
          "char": "c",
          "description": "Total number of hashes to produce",
          "name": "count",
          "default": 1000000,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "distance": {
          "char": "d",
          "description": "Distance between each hash",
          "name": "distance",
          "default": 1000,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "pretty": {
          "description": "Prints JSON in pretty format rather than condensed.",
          "name": "pretty",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "hash-onion",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "hash-onion.js"
      ]
    },
    "init": {
      "aliases": [],
      "args": {
        "projectPath": {
          "default": "/Users/corbifex/Developer/klayr/klayr-sdk-6-1/commander",
          "description": "Path to create the project.",
          "name": "projectPath"
        }
      },
      "description": "Bootstrap a blockchain application using Klayr SDK.",
      "examples": [
        "init",
        "init --template klayr-ts",
        "init --template @some-global-npm-package",
        "init /project/path",
        "init /project/path --template klayr-ts"
      ],
      "flags": {
        "template": {
          "char": "t",
          "description": "Template to bootstrap the application. It will read from `.klayrrc.json` or use `klayr-ts` if not found.",
          "name": "template",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "registry": {
          "description": "URL of a registry to download dependencies from.",
          "name": "registry",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "init",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "init.js"
      ]
    },
    "endpoint:invoke": {
      "aliases": [],
      "args": {
        "endpoint": {
          "description": "Endpoint to invoke",
          "name": "endpoint",
          "required": true
        },
        "params": {
          "description": "Endpoint parameters (Optional)",
          "name": "params",
          "required": false
        }
      },
      "description": "Invokes the provided endpoint.",
      "examples": [
        "endpoint:invoke {endpoint} {parameters}",
        "endpoint:invoke --data-path --file",
        "endpoint:invoke generator_getAllKeys",
        "endpoint:invoke consensus_getBFTParameters '{\"height\": 2}' -d ~/.klayr/pos-mainchain --pretty",
        "endpoint:invoke consensus_getBFTParameters -f ./input.json"
      ],
      "flags": {
        "data-path": {
          "char": "d",
          "description": "Directory path to specify where node data is stored. Environment variable \"KLAYR_DATA_PATH\" can also be used.",
          "env": "KLAYR_DATA_PATH",
          "name": "data-path",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "pretty": {
          "description": "Prints JSON in pretty format rather than condensed.",
          "name": "pretty",
          "allowNo": false,
          "type": "boolean"
        },
        "file": {
          "char": "f",
          "description": "Input file.",
          "name": "file",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "endpoint:invoke",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "endpoint",
        "invoke.js"
      ]
    },
    "message:decrypt": {
      "aliases": [],
      "args": {
        "message": {
          "description": "Encrypted message.",
          "name": "message"
        }
      },
      "description": "\n\tDecrypts a previously encrypted message using your the password used to encrypt.\n\t",
      "examples": [
        "message:decrypt "
      ],
      "flags": {
        "password": {
          "char": "w",
          "description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
          "name": "password",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "message": {
          "char": "m",
          "description": "Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=\"hello world\"\n",
          "name": "message",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "message:decrypt",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "message",
        "decrypt.js"
      ]
    },
    "message:encrypt": {
      "aliases": [],
      "args": {
        "message": {
          "description": "Message to encrypt.",
          "name": "message"
        }
      },
      "description": "\n\tEncrypts a message with a password provided.\n\t",
      "examples": [
        "message:encrypt \"Hello world\""
      ],
      "flags": {
        "password": {
          "char": "w",
          "description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
          "name": "password",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "message": {
          "char": "m",
          "description": "Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=\"hello world\"\n",
          "name": "message",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "pretty": {
          "description": "Prints JSON in pretty format rather than condensed.",
          "name": "pretty",
          "allowNo": false,
          "type": "boolean"
        },
        "stringify": {
          "char": "s",
          "description": "Display encrypted message in stringified format",
          "name": "stringify",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "message:encrypt",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "message",
        "encrypt.js"
      ]
    },
    "message:sign": {
      "aliases": [],
      "args": {
        "message": {
          "description": "Message to sign.",
          "name": "message"
        }
      },
      "description": "\n\tSigns a message using your secret passphrase.\n\t",
      "examples": [
        "message:sign \"Hello world\""
      ],
      "flags": {
        "json": {
          "char": "j",
          "description": "Prints output in JSON format. You can change the default behavior in your config.json file.",
          "name": "json",
          "allowNo": true,
          "type": "boolean"
        },
        "pretty": {
          "description": "Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behavior in your config.json file.",
          "name": "pretty",
          "allowNo": true,
          "type": "boolean"
        },
        "passphrase": {
          "char": "p",
          "description": "Specifies a source for your secret passphrase. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --passphrase='my secret passphrase' (should only be used where security is not important)\n",
          "name": "passphrase",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "message": {
          "char": "m",
          "description": "Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=\"hello world\"\n",
          "name": "message",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "message:sign",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "message",
        "sign.js"
      ]
    },
    "message:verify": {
      "aliases": [],
      "args": {
        "publicKey": {
          "description": "Public key of the signer of the message.",
          "name": "publicKey",
          "required": true
        },
        "signature": {
          "description": "Signature to verify.",
          "name": "signature",
          "required": true
        },
        "message": {
          "description": "Message to verify.",
          "name": "message"
        }
      },
      "description": "\n\tVerifies a signature for a message using the signer’s public key.\n\t",
      "examples": [
        "message:verify 647aac1e2df8a5c870499d7ddc82236b1e10936977537a3844a6b05ea33f9ef6 2a3ca127efcf7b2bf62ac8c3b1f5acf6997cab62ba9fde3567d188edcbacbc5dc8177fb88d03a8691ce03348f569b121bca9e7a3c43bf5c056382f35ff843c09 \"Hello world\""
      ],
      "flags": {
        "json": {
          "char": "j",
          "description": "Prints output in JSON format. You can change the default behavior in your config.json file.",
          "name": "json",
          "allowNo": true,
          "type": "boolean"
        },
        "pretty": {
          "description": "Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behavior in your config.json file.",
          "name": "pretty",
          "allowNo": true,
          "type": "boolean"
        },
        "message": {
          "char": "m",
          "description": "Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=\"hello world\"\n",
          "name": "message",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "message:verify",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "message",
        "verify.js"
      ]
    },
    "generate:command": {
      "aliases": [],
      "args": {
        "moduleName": {
          "description": "Module name.",
          "name": "moduleName",
          "required": true
        },
        "commandName": {
          "description": "Asset name.",
          "name": "commandName",
          "required": true
        }
      },
      "description": "Creates a command skeleton for the given module name and command name.",
      "examples": [
        "generate:command moduleName commandName",
        "generate:command nft transfer"
      ],
      "flags": {
        "template": {
          "char": "t",
          "description": "Template to bootstrap the application. It will read from `.klayrrc.json` or use `klayr-ts` if not found.",
          "name": "template",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "generate:command",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "generate",
        "command.js"
      ]
    },
    "generate:module": {
      "aliases": [],
      "args": {
        "moduleName": {
          "description": "Module name.",
          "name": "moduleName",
          "required": true
        }
      },
      "description": "Creates a module skeleton for the given name.",
      "examples": [
        "generate:module nft"
      ],
      "flags": {
        "template": {
          "char": "t",
          "description": "Template to bootstrap the application. It will read from `.klayrrc.json` or use `klayr-ts` if not found.",
          "name": "template",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "generate:module",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "generate",
        "module.js"
      ]
    },
    "generate:plugin": {
      "aliases": [],
      "args": {
        "name": {
          "description": "Name of the plugin.",
          "name": "name",
          "required": true
        }
      },
      "description": "Creates custom plugin.",
      "examples": [
        "generate:plugin myPlugin",
        "generate:plugin myPlugin --standalone --output ./my_plugin"
      ],
      "flags": {
        "template": {
          "char": "t",
          "description": "Template to bootstrap the application. It will read from `.klayrrc.json` or use `klayr-ts` if not found.",
          "name": "template",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "standalone": {
          "description": "Create a standalone plugin package.",
          "name": "standalone",
          "allowNo": false,
          "type": "boolean"
        },
        "output": {
          "char": "o",
          "dependsOn": [
            "standalone"
          ],
          "description": "Path to create the plugin.",
          "name": "output",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "registry": {
          "dependsOn": [
            "standalone"
          ],
          "description": "URL of a registry to download dependencies from.",
          "name": "registry",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "generate:plugin",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "generate",
        "plugin.js"
      ]
    },
    "keys:create": {
      "aliases": [],
      "args": {},
      "description": "Return keys corresponding to the given passphrase.",
      "examples": [
        "keys:create",
        "keys:create --passphrase your-passphrase",
        "keys:create --passphrase your-passphrase --no-encrypt",
        "keys:create --passphrase your-passphrase --password your-password",
        "keys:create --passphrase your-passphrase --password your-password --count 2",
        "keys:create --passphrase your-passphrase --no-encrypt --count 2 --offset 1",
        "keys:create --passphrase your-passphrase --no-encrypt --count 2 --offset 1 --chainid 1",
        "keys:create --passphrase your-passphrase --password your-password --count 2 --offset 1 --chainid 1 --output /mypath/keys.json"
      ],
      "flags": {
        "output": {
          "char": "o",
          "description": "The output directory. Default will set to current working directory.",
          "name": "output",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "passphrase": {
          "char": "p",
          "description": "Specifies a source for your secret passphrase. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --passphrase='my secret passphrase' (should only be used where security is not important)\n",
          "name": "passphrase",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "no-encrypt": {
          "char": "n",
          "description": "No encrypted message object to be created",
          "name": "no-encrypt",
          "allowNo": false,
          "type": "boolean"
        },
        "password": {
          "char": "w",
          "description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
          "name": "password",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "count": {
          "char": "c",
          "description": "Number of keys to create",
          "name": "count",
          "default": 1,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "offset": {
          "char": "f",
          "description": "Offset for the key derivation path",
          "name": "offset",
          "default": 0,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "chainid": {
          "char": "i",
          "description": "Chain id",
          "name": "chainid",
          "default": 0,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "add-legacy": {
          "description": "Add legacy key derivation path to the result",
          "name": "add-legacy",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "keys:create",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "keys",
        "create.js"
      ]
    },
    "keys:encrypt": {
      "aliases": [],
      "args": {},
      "description": "Encrypt keys from a file and overwrite the file",
      "examples": [
        "keys:encrypt --file-path ./my/path/keys.json",
        "keys:encrypt --file-path ./my/path/keys.json --password mypass"
      ],
      "flags": {
        "file-path": {
          "char": "f",
          "description": "Path of the file to encrypt from",
          "name": "file-path",
          "required": true,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "password": {
          "char": "w",
          "description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
          "name": "password",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "keys:encrypt",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "keys",
        "encrypt.js"
      ]
    },
    "keys:export": {
      "aliases": [],
      "args": {},
      "description": "Export to <FILE>.",
      "examples": [
        "keys:export --output /mypath/keys.json",
        "keys:export --output /mypath/keys.json --data-path ./data "
      ],
      "flags": {
        "data-path": {
          "char": "d",
          "description": "Directory path to specify where node data is stored. Environment variable \"KLAYR_DATA_PATH\" can also be used.",
          "env": "KLAYR_DATA_PATH",
          "name": "data-path",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "pretty": {
          "description": "Prints JSON in pretty format rather than condensed.",
          "name": "pretty",
          "allowNo": false,
          "type": "boolean"
        },
        "output": {
          "char": "o",
          "description": "The output directory. Default will set to current working directory.",
          "name": "output",
          "default": "/Users/corbifex/Developer/klayr/klayr-sdk-6-1/commander",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "keys:export",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "keys",
        "export.js"
      ]
    },
    "keys:import": {
      "aliases": [],
      "args": {},
      "description": "Import from <FILE>.",
      "examples": [
        "keys:import --file-path ./my/path/keys.json",
        "keys:import --file-path ./my/path/keys.json --data-path ./data "
      ],
      "flags": {
        "data-path": {
          "char": "d",
          "description": "Directory path to specify where node data is stored. Environment variable \"KLAYR_DATA_PATH\" can also be used.",
          "env": "KLAYR_DATA_PATH",
          "name": "data-path",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "pretty": {
          "description": "Prints JSON in pretty format rather than condensed.",
          "name": "pretty",
          "allowNo": false,
          "type": "boolean"
        },
        "file-path": {
          "char": "f",
          "description": "Path of the file to import from",
          "name": "file-path",
          "required": true,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "keys:import",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "keys",
        "import.js"
      ]
    },
    "passphrase:create": {
      "aliases": [],
      "args": {},
      "description": "Returns a randomly generated 24 words mnemonic passphrase.",
      "examples": [
        "passphrase:create",
        "passphrase:create --output /mypath/passphrase.json"
      ],
      "flags": {
        "output": {
          "char": "o",
          "description": "The output directory. Default will set to current working directory.",
          "name": "output",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "passphrase:create",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "passphrase",
        "create.js"
      ]
    },
    "passphrase:decrypt": {
      "aliases": [],
      "args": {},
      "description": "Decrypt secret passphrase using the password provided at the time of encryption.",
      "examples": [
        "passphrase:decrypt --file-path ./my/path/output.json",
        "passphrase:decrypt --file-path ./my/path/output.json --password your-password"
      ],
      "flags": {
        "password": {
          "char": "w",
          "description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
          "name": "password",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "file-path": {
          "char": "f",
          "description": "Path of the file to import from",
          "name": "file-path",
          "required": true,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "passphrase:decrypt",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "passphrase",
        "decrypt.js"
      ]
    },
    "passphrase:encrypt": {
      "aliases": [],
      "args": {},
      "description": "Encrypt secret passphrase using password.",
      "examples": [
        "passphrase:encrypt",
        "passphrase:encrypt --passphrase your-passphrase --output /mypath/keys.json",
        "passphrase:encrypt --password your-password",
        "passphrase:encrypt --password your-password --passphrase your-passphrase --output /mypath/keys.json",
        "passphrase:encrypt --output-public-key --output /mypath/keys.json"
      ],
      "flags": {
        "password": {
          "char": "w",
          "description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
          "name": "password",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "passphrase": {
          "char": "p",
          "description": "Specifies a source for your secret passphrase. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --passphrase='my secret passphrase' (should only be used where security is not important)\n",
          "name": "passphrase",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "output-public-key": {
          "description": "Includes the public key in the output. This option is provided for the convenience of node operators.",
          "name": "output-public-key",
          "allowNo": false,
          "type": "boolean"
        },
        "output": {
          "char": "o",
          "description": "The output directory. Default will set to current working directory.",
          "name": "output",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "passphrase:encrypt",
      "pluginAlias": "klayr-commander",
      "pluginName": "klayr-commander",
      "pluginType": "core",
      "strict": true,
      "parse": true,
      "parserOptions": {},
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "passphrase",
        "encrypt.js"
      ]
    }
  },
  "version": "6.1.2"
}