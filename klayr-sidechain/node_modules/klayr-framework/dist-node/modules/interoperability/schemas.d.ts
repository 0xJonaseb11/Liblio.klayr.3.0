export declare const ccmSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        module: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        crossChainCommand: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        nonce: {
            dataType: string;
            fieldNumber: number;
        };
        fee: {
            dataType: string;
            fieldNumber: number;
        };
        sendingChainID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        receivingChainID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        params: {
            dataType: string;
            fieldNumber: number;
        };
        status: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const sidechainRegParams: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        name: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        sidechainValidators: {
            fieldNumber: number;
            maxItems: number;
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    blsKey: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    bftWeight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
            minItems: number;
        };
        sidechainCertificateThreshold: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const mainchainRegParams: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        ownChainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        ownName: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        mainchainValidators: {
            fieldNumber: number;
            maxItems: number;
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    blsKey: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    bftWeight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
            minItems: number;
        };
        mainchainCertificateThreshold: {
            dataType: string;
            fieldNumber: number;
        };
        signature: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        aggregationBits: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const crossChainUpdateTransactionParams: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        sendingChainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        certificate: {
            dataType: string;
            fieldNumber: number;
        };
        activeValidatorsUpdate: {
            type: string;
            fieldNumber: number;
            required: string[];
            properties: {
                blsKeysUpdate: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                    };
                };
                bftWeightsUpdate: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        dataType: string;
                    };
                };
                bftWeightsUpdateBitmap: {
                    dataType: string;
                    fieldNumber: number;
                };
            };
        };
        certificateThreshold: {
            dataType: string;
            fieldNumber: number;
        };
        inboxUpdate: {
            type: string;
            fieldNumber: number;
            required: string[];
            properties: {
                crossChainMessages: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        dataType: string;
                    };
                };
                messageWitnessHashes: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                    };
                };
                outboxRootWitness: {
                    type: string;
                    fieldNumber: number;
                    required: string[];
                    properties: {
                        bitmap: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        siblingHashes: {
                            type: string;
                            fieldNumber: number;
                            items: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const messageRecoveryParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        crossChainMessages: {
            type: string;
            items: {
                dataType: string;
            };
            fieldNumber: number;
        };
        idxs: {
            type: string;
            items: {
                dataType: string;
            };
            fieldNumber: number;
        };
        siblingHashes: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
    };
};
export declare const messageRecoveryInitializationParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        channel: {
            dataType: string;
            fieldNumber: number;
        };
        bitmap: {
            dataType: string;
            fieldNumber: number;
        };
        siblingHashes: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
    };
};
export declare const registrationCCMParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        name: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        chainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        messageFeeTokenID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        minReturnFeePerByte: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const sidechainTerminatedCCMParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        stateRoot: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const validatorsHashInputSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        activeValidators: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    blsKey: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    bftWeight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        certificateThreshold: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const registrationSignatureMessageSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        ownChainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        ownName: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        mainchainValidators: {
            fieldNumber: number;
            maxItems: number;
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    blsKey: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    bftWeight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
            minItems: number;
        };
        mainchainCertificateThreshold: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const stateRecoveryParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        module: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        storeEntries: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                properties: {
                    substorePrefix: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    storeKey: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    storeValue: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    bitmap: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
                required: string[];
            };
        };
        siblingHashes: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
    };
};
export declare const stateRecoveryInitParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        sidechainAccount: {
            dataType: string;
            fieldNumber: number;
        };
        bitmap: {
            dataType: string;
            fieldNumber: number;
        };
        siblingHashes: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
    };
};
export declare const terminateSidechainForLivenessParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const getChainAccountRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const getChainAccountResponseSchema: {
    type: string;
    required: string[];
    properties: {
        name: {
            dataType: string;
            fieldNumber: number;
        };
        lastCertificate: {
            type: string;
            fieldNumber: number;
            required: string[];
            properties: {
                height: {
                    dataType: string;
                    fieldNumber: number;
                };
                timestamp: {
                    dataType: string;
                    fieldNumber: number;
                };
                stateRoot: {
                    dataType: string;
                    format: string;
                    fieldNumber: number;
                };
                validatorsHash: {
                    dataType: string;
                    format: string;
                    fieldNumber: number;
                };
            };
        };
        status: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const getChainValidatorsRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const getChainValidatorsResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        activeValidators: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    blsKey: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    bftWeight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        certificateThreshold: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const isChainIDAvailableRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const isChainIDAvailableResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        result: {
            type: string;
        };
    };
};
export declare const isChainNameAvailableRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        name: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const isChainNameAvailableResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        result: {
            type: string;
        };
    };
};
export declare const getMainchainIDRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const getMainchainIDResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        result: {
            type: string;
        };
    };
};
export declare const getChannelRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const getTerminatedStateAccountRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const getTerminatedOutboxAccountRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const getCCMSchemaResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        schema: {
            $id: string;
            type: string;
            required: string[];
            properties: {
                module: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
                crossChainCommand: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
                nonce: {
                    dataType: string;
                    fieldNumber: number;
                };
                fee: {
                    dataType: string;
                    fieldNumber: number;
                };
                sendingChainID: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
                receivingChainID: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
                params: {
                    dataType: string;
                    fieldNumber: number;
                };
                status: {
                    dataType: string;
                    fieldNumber: number;
                };
            };
        };
    };
};
export declare const genesisInteroperabilitySchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        ownChainName: {
            dataType: string;
            maxLength: number;
            fieldNumber: number;
        };
        ownChainNonce: {
            dataType: string;
            fieldNumber: number;
        };
        chainInfos: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    chainID: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    chainData: {
                        fieldNumber: number;
                        $id: string;
                        type: string;
                        required: string[];
                        properties: {
                            name: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            lastCertificate: {
                                type: string;
                                fieldNumber: number;
                                required: string[];
                                properties: {
                                    height: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                    timestamp: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                    stateRoot: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                    validatorsHash: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                };
                            };
                            status: {
                                dataType: string;
                                fieldNumber: number;
                            };
                        };
                    };
                    channelData: {
                        fieldNumber: number;
                        $id: string;
                        type: string;
                        required: string[];
                        properties: {
                            inbox: {
                                type: string;
                                fieldNumber: number;
                                required: string[];
                                properties: {
                                    appendPath: {
                                        type: string;
                                        items: {
                                            dataType: string;
                                            minLength: number;
                                            maxLength: number;
                                        };
                                        fieldNumber: number;
                                    };
                                    size: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                    root: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                };
                            };
                            outbox: {
                                type: string;
                                fieldNumber: number;
                                required: string[];
                                properties: {
                                    appendPath: {
                                        type: string;
                                        items: {
                                            dataType: string;
                                            minLength: number;
                                            maxLength: number;
                                        };
                                        fieldNumber: number;
                                    };
                                    size: {
                                        dataType: string;
                                        fieldNumber: number;
                                    };
                                    root: {
                                        dataType: string;
                                        minLength: number;
                                        maxLength: number;
                                        fieldNumber: number;
                                    };
                                };
                            };
                            partnerChainOutboxRoot: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            messageFeeTokenID: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            minReturnFeePerByte: {
                                dataType: string;
                                fieldNumber: number;
                            };
                        };
                    };
                    chainValidators: {
                        fieldNumber: number;
                        $id: string;
                        type: string;
                        required: string[];
                        properties: {
                            activeValidators: {
                                type: string;
                                fieldNumber: number;
                                minItems: number;
                                maxItems: number;
                                items: {
                                    type: string;
                                    required: string[];
                                    properties: {
                                        blsKey: {
                                            dataType: string;
                                            minLength: number;
                                            maxLength: number;
                                            fieldNumber: number;
                                        };
                                        bftWeight: {
                                            dataType: string;
                                            fieldNumber: number;
                                        };
                                    };
                                };
                            };
                            certificateThreshold: {
                                dataType: string;
                                fieldNumber: number;
                            };
                        };
                    };
                };
            };
        };
        terminatedStateAccounts: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    chainID: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    terminatedStateAccount: {
                        fieldNumber: number;
                        $id: string;
                        type: string;
                        required: string[];
                        properties: {
                            stateRoot: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            mainchainStateRoot: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            initialized: {
                                dataType: string;
                                fieldNumber: number;
                            };
                        };
                    };
                };
            };
        };
        terminatedOutboxAccounts: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    chainID: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    terminatedOutboxAccount: {
                        fieldNumber: number;
                        $id: string;
                        type: string;
                        required: string[];
                        properties: {
                            outboxRoot: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            outboxSize: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            partnerChainInboxSize: {
                                dataType: string;
                                fieldNumber: number;
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const getRegistrationFeeSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        registrationFee: {
            type: string;
        };
    };
};
export declare const getMinimumMessageFeeResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        fee: {
            type: string;
        };
    };
};
