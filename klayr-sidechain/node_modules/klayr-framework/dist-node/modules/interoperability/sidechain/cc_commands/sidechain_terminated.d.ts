/// <reference types="node" />
import { BaseInteroperabilityCCCommand } from '../../base_interoperability_cc_commands';
import { CCCommandExecuteContext, ImmutableCrossChainMessageContext } from '../../types';
import { SidechainInteroperabilityInternalMethod } from '../internal_method';
interface CCMSidechainTerminatedParams {
    chainID: Buffer;
    stateRoot: Buffer;
}
export declare class SidechainCCSidechainTerminatedCommand extends BaseInteroperabilityCCCommand<SidechainInteroperabilityInternalMethod> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            chainID: {
                dataType: string;
                fieldNumber: number;
                minLength: number;
                maxLength: number;
            };
            stateRoot: {
                dataType: string;
                fieldNumber: number;
                minLength: number;
                maxLength: number;
            };
        };
    };
    get name(): string;
    verify(ctx: ImmutableCrossChainMessageContext): Promise<void>;
    execute(context: CCCommandExecuteContext<CCMSidechainTerminatedParams>): Promise<void>;
}
export {};
