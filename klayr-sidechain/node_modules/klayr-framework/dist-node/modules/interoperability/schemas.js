"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMinimumMessageFeeResponseSchema = exports.getRegistrationFeeSchema = exports.genesisInteroperabilitySchema = exports.getCCMSchemaResponseSchema = exports.getTerminatedOutboxAccountRequestSchema = exports.getTerminatedStateAccountRequestSchema = exports.getChannelRequestSchema = exports.getMainchainIDResponseSchema = exports.getMainchainIDRequestSchema = exports.isChainNameAvailableResponseSchema = exports.isChainNameAvailableRequestSchema = exports.isChainIDAvailableResponseSchema = exports.isChainIDAvailableRequestSchema = exports.getChainValidatorsResponseSchema = exports.getChainValidatorsRequestSchema = exports.getChainAccountResponseSchema = exports.getChainAccountRequestSchema = exports.terminateSidechainForLivenessParamsSchema = exports.stateRecoveryInitParamsSchema = exports.stateRecoveryParamsSchema = exports.registrationSignatureMessageSchema = exports.validatorsHashInputSchema = exports.sidechainTerminatedCCMParamsSchema = exports.registrationCCMParamsSchema = exports.messageRecoveryInitializationParamsSchema = exports.messageRecoveryParamsSchema = exports.crossChainUpdateTransactionParams = exports.mainchainRegParams = exports.sidechainRegParams = exports.ccmSchema = void 0;
const constants_1 = require("../token/constants");
const constants_2 = require("./constants");
const chain_account_1 = require("./stores/chain_account");
const chain_validators_1 = require("./stores/chain_validators");
const channel_data_1 = require("./stores/channel_data");
const terminated_state_1 = require("./stores/terminated_state");
const terminated_outbox_1 = require("./stores/terminated_outbox");
exports.ccmSchema = {
    $id: '/modules/interoperability/ccm',
    type: 'object',
    required: [
        'module',
        'crossChainCommand',
        'nonce',
        'fee',
        'sendingChainID',
        'receivingChainID',
        'params',
        'status',
    ],
    properties: {
        module: {
            dataType: 'string',
            minLength: constants_2.MIN_MODULE_NAME_LENGTH,
            maxLength: constants_2.MAX_MODULE_NAME_LENGTH,
            fieldNumber: 1,
        },
        crossChainCommand: {
            dataType: 'string',
            minLength: constants_2.MIN_CROSS_CHAIN_COMMAND_NAME_LENGTH,
            maxLength: constants_2.MAX_CROSS_CHAIN_COMMAND_NAME_LENGTH,
            fieldNumber: 2,
        },
        nonce: {
            dataType: 'uint64',
            fieldNumber: 3,
        },
        fee: {
            dataType: 'uint64',
            fieldNumber: 4,
        },
        sendingChainID: {
            dataType: 'bytes',
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
            fieldNumber: 5,
        },
        receivingChainID: {
            dataType: 'bytes',
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
            fieldNumber: 6,
        },
        params: {
            dataType: 'bytes',
            fieldNumber: 7,
        },
        status: {
            dataType: 'uint32',
            fieldNumber: 8,
        },
    },
};
const activeChainValidatorsSchema = {
    type: 'array',
    items: {
        type: 'object',
        required: ['blsKey', 'bftWeight'],
        properties: {
            blsKey: {
                dataType: 'bytes',
                fieldNumber: 1,
                minLength: constants_2.BLS_PUBLIC_KEY_LENGTH,
                maxLength: constants_2.BLS_PUBLIC_KEY_LENGTH,
            },
            bftWeight: {
                dataType: 'uint64',
                fieldNumber: 2,
            },
        },
    },
    minItems: 1,
};
exports.sidechainRegParams = {
    $id: '/modules/interoperability/mainchain/sidechainRegistration',
    type: 'object',
    required: ['chainID', 'name', 'sidechainValidators', 'sidechainCertificateThreshold'],
    properties: {
        chainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        name: {
            dataType: 'string',
            fieldNumber: 2,
            minLength: constants_2.MIN_CHAIN_NAME_LENGTH,
            maxLength: constants_2.MAX_CHAIN_NAME_LENGTH,
        },
        sidechainValidators: {
            ...activeChainValidatorsSchema,
            fieldNumber: 3,
            maxItems: constants_2.MAX_NUM_VALIDATORS,
        },
        sidechainCertificateThreshold: {
            dataType: 'uint64',
            fieldNumber: 4,
        },
    },
};
exports.mainchainRegParams = {
    $id: '/modules/interoperability/sidechain/mainchainRegistration',
    type: 'object',
    required: [
        'ownChainID',
        'ownName',
        'mainchainValidators',
        'mainchainCertificateThreshold',
        'signature',
        'aggregationBits',
    ],
    properties: {
        ownChainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        ownName: {
            dataType: 'string',
            fieldNumber: 2,
            minLength: constants_2.MIN_CHAIN_NAME_LENGTH,
            maxLength: constants_2.MAX_CHAIN_NAME_LENGTH,
        },
        mainchainValidators: {
            ...activeChainValidatorsSchema,
            fieldNumber: 3,
            maxItems: constants_2.NUMBER_ACTIVE_VALIDATORS_MAINCHAIN,
        },
        mainchainCertificateThreshold: {
            dataType: 'uint64',
            fieldNumber: 4,
        },
        signature: {
            dataType: 'bytes',
            fieldNumber: 5,
            minLength: constants_2.BLS_SIGNATURE_LENGTH,
            maxLength: constants_2.BLS_SIGNATURE_LENGTH,
        },
        aggregationBits: {
            dataType: 'bytes',
            fieldNumber: 6,
        },
    },
};
exports.crossChainUpdateTransactionParams = {
    $id: '/modules/interoperability/ccu',
    type: 'object',
    required: [
        'sendingChainID',
        'certificate',
        'activeValidatorsUpdate',
        'certificateThreshold',
        'inboxUpdate',
    ],
    properties: {
        sendingChainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        certificate: {
            dataType: 'bytes',
            fieldNumber: 2,
        },
        activeValidatorsUpdate: {
            type: 'object',
            fieldNumber: 3,
            required: ['blsKeysUpdate', 'bftWeightsUpdate', 'bftWeightsUpdateBitmap'],
            properties: {
                blsKeysUpdate: {
                    type: 'array',
                    fieldNumber: 1,
                    items: {
                        dataType: 'bytes',
                        minLength: constants_2.BLS_PUBLIC_KEY_LENGTH,
                        maxLength: constants_2.BLS_PUBLIC_KEY_LENGTH,
                    },
                },
                bftWeightsUpdate: {
                    type: 'array',
                    fieldNumber: 2,
                    items: {
                        dataType: 'uint64',
                    },
                },
                bftWeightsUpdateBitmap: {
                    dataType: 'bytes',
                    fieldNumber: 3,
                },
            },
        },
        certificateThreshold: {
            dataType: 'uint64',
            fieldNumber: 4,
        },
        inboxUpdate: {
            type: 'object',
            fieldNumber: 5,
            required: ['crossChainMessages', 'messageWitnessHashes', 'outboxRootWitness'],
            properties: {
                crossChainMessages: {
                    type: 'array',
                    fieldNumber: 1,
                    items: { dataType: 'bytes' },
                },
                messageWitnessHashes: {
                    type: 'array',
                    fieldNumber: 2,
                    items: {
                        dataType: 'bytes',
                        minLength: constants_2.HASH_LENGTH,
                        maxLength: constants_2.HASH_LENGTH,
                    },
                },
                outboxRootWitness: {
                    type: 'object',
                    fieldNumber: 3,
                    required: ['bitmap', 'siblingHashes'],
                    properties: {
                        bitmap: {
                            dataType: 'bytes',
                            fieldNumber: 1,
                        },
                        siblingHashes: {
                            type: 'array',
                            fieldNumber: 2,
                            items: {
                                dataType: 'bytes',
                                minLength: constants_2.HASH_LENGTH,
                                maxLength: constants_2.HASH_LENGTH,
                            },
                        },
                    },
                },
            },
        },
    },
};
exports.messageRecoveryParamsSchema = {
    $id: '/modules/interoperability/mainchain/messageRecovery',
    type: 'object',
    required: ['chainID', 'crossChainMessages', 'idxs', 'siblingHashes'],
    properties: {
        chainID: {
            dataType: 'bytes',
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
            fieldNumber: 1,
        },
        crossChainMessages: {
            type: 'array',
            items: {
                dataType: 'bytes',
            },
            fieldNumber: 2,
        },
        idxs: {
            type: 'array',
            items: {
                dataType: 'uint32',
            },
            fieldNumber: 3,
        },
        siblingHashes: {
            type: 'array',
            items: {
                dataType: 'bytes',
                minLength: constants_2.HASH_LENGTH,
                maxLength: constants_2.HASH_LENGTH,
            },
            fieldNumber: 4,
        },
    },
};
exports.messageRecoveryInitializationParamsSchema = {
    $id: '/modules/interoperability/mainchain/messageRecoveryInitialization',
    type: 'object',
    required: ['chainID', 'channel', 'bitmap', 'siblingHashes'],
    properties: {
        chainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        channel: {
            dataType: 'bytes',
            fieldNumber: 2,
        },
        bitmap: {
            dataType: 'bytes',
            fieldNumber: 3,
        },
        siblingHashes: {
            type: 'array',
            items: {
                dataType: 'bytes',
                minLength: constants_2.HASH_LENGTH,
                maxLength: constants_2.HASH_LENGTH,
            },
            fieldNumber: 4,
        },
    },
};
exports.registrationCCMParamsSchema = {
    $id: '/modules/interoperability/ccCommand/registration',
    type: 'object',
    required: ['name', 'chainID', 'messageFeeTokenID', 'minReturnFeePerByte'],
    properties: {
        name: {
            dataType: 'string',
            minLength: constants_2.MIN_CHAIN_NAME_LENGTH,
            maxLength: constants_2.MAX_CHAIN_NAME_LENGTH,
            fieldNumber: 1,
        },
        chainID: {
            dataType: 'bytes',
            fieldNumber: 2,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        messageFeeTokenID: {
            dataType: 'bytes',
            minLength: constants_1.TOKEN_ID_LENGTH,
            maxLength: constants_1.TOKEN_ID_LENGTH,
            fieldNumber: 3,
        },
        minReturnFeePerByte: {
            dataType: 'uint64',
            fieldNumber: 4,
        },
    },
};
exports.sidechainTerminatedCCMParamsSchema = {
    $id: '/modules/interoperability/ccCommand/sidechainTerminated',
    type: 'object',
    required: ['chainID', 'stateRoot'],
    properties: {
        chainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        stateRoot: {
            dataType: 'bytes',
            fieldNumber: 2,
            minLength: constants_2.HASH_LENGTH,
            maxLength: constants_2.HASH_LENGTH,
        },
    },
};
exports.validatorsHashInputSchema = {
    $id: '/modules/interoperability/validatorsHashInput',
    type: 'object',
    required: ['activeValidators', 'certificateThreshold'],
    properties: {
        activeValidators: {
            type: 'array',
            fieldNumber: 1,
            items: {
                type: 'object',
                required: ['blsKey', 'bftWeight'],
                properties: {
                    blsKey: { dataType: 'bytes', fieldNumber: 1 },
                    bftWeight: { dataType: 'uint64', fieldNumber: 2 },
                },
            },
        },
        certificateThreshold: { dataType: 'uint64', fieldNumber: 2 },
    },
};
exports.registrationSignatureMessageSchema = {
    $id: '/modules/interoperability/sidechain/registrationSignatureMessage',
    type: 'object',
    required: ['ownChainID', 'ownName', 'mainchainValidators', 'mainchainCertificateThreshold'],
    properties: {
        ownChainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        ownName: {
            dataType: 'string',
            fieldNumber: 2,
            minLength: constants_2.MIN_CHAIN_NAME_LENGTH,
            maxLength: constants_2.MAX_CHAIN_NAME_LENGTH,
        },
        mainchainValidators: {
            ...activeChainValidatorsSchema,
            fieldNumber: 3,
            maxItems: constants_2.NUMBER_ACTIVE_VALIDATORS_MAINCHAIN,
        },
        mainchainCertificateThreshold: {
            dataType: 'uint64',
            fieldNumber: 4,
        },
    },
};
exports.stateRecoveryParamsSchema = {
    $id: '/modules/interoperability/mainchain/commands/stateRecovery',
    type: 'object',
    required: ['chainID', 'module', 'storeEntries', 'siblingHashes'],
    properties: {
        chainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        module: {
            dataType: 'string',
            fieldNumber: 2,
            minLength: constants_2.MIN_MODULE_NAME_LENGTH,
            maxLength: constants_2.MAX_MODULE_NAME_LENGTH,
        },
        storeEntries: {
            type: 'array',
            fieldNumber: 3,
            items: {
                type: 'object',
                properties: {
                    substorePrefix: {
                        dataType: 'bytes',
                        fieldNumber: 1,
                        minLength: constants_2.SUBSTORE_PREFIX_LENGTH,
                        maxLength: constants_2.SUBSTORE_PREFIX_LENGTH,
                    },
                    storeKey: {
                        dataType: 'bytes',
                        fieldNumber: 2,
                    },
                    storeValue: {
                        dataType: 'bytes',
                        fieldNumber: 3,
                    },
                    bitmap: {
                        dataType: 'bytes',
                        fieldNumber: 4,
                    },
                },
                required: ['substorePrefix', 'storeKey', 'storeValue', 'bitmap'],
            },
        },
        siblingHashes: {
            type: 'array',
            items: {
                dataType: 'bytes',
                minLength: constants_2.HASH_LENGTH,
                maxLength: constants_2.HASH_LENGTH,
            },
            fieldNumber: 4,
        },
    },
};
exports.stateRecoveryInitParamsSchema = {
    $id: '/modules/interoperability/mainchain/stateRecoveryInitialization',
    type: 'object',
    required: ['chainID', 'sidechainAccount', 'bitmap', 'siblingHashes'],
    properties: {
        chainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
        sidechainAccount: {
            dataType: 'bytes',
            fieldNumber: 2,
        },
        bitmap: {
            dataType: 'bytes',
            fieldNumber: 3,
        },
        siblingHashes: {
            type: 'array',
            items: {
                dataType: 'bytes',
                minLength: constants_2.HASH_LENGTH,
                maxLength: constants_2.HASH_LENGTH,
            },
            fieldNumber: 4,
        },
    },
};
exports.terminateSidechainForLivenessParamsSchema = {
    $id: '/modules/interoperability/mainchain/terminateSidechainForLiveness',
    type: 'object',
    required: ['chainID'],
    properties: {
        chainID: {
            dataType: 'bytes',
            fieldNumber: 1,
            minLength: constants_1.CHAIN_ID_LENGTH,
            maxLength: constants_1.CHAIN_ID_LENGTH,
        },
    },
};
exports.getChainAccountRequestSchema = {
    $id: '/modules/interoperability/endpoint/getChainAccountRequest',
    type: 'object',
    required: ['chainID'],
    properties: {
        chainID: {
            type: 'string',
            format: 'hex',
            minLength: constants_2.CHAIN_ID_STRING_LENGTH,
            maxLength: constants_2.CHAIN_ID_STRING_LENGTH,
        },
    },
};
exports.getChainAccountResponseSchema = chain_account_1.chainDataJSONSchema;
exports.getChainValidatorsRequestSchema = exports.getChainAccountRequestSchema;
exports.getChainValidatorsResponseSchema = exports.validatorsHashInputSchema;
exports.isChainIDAvailableRequestSchema = exports.getChainAccountRequestSchema;
exports.isChainIDAvailableResponseSchema = {
    $id: '/modules/interoperability/endpoint/isChainIDAvailableResponseSchema',
    type: 'object',
    required: ['result'],
    properties: {
        result: {
            type: 'boolean',
        },
    },
};
exports.isChainNameAvailableRequestSchema = {
    $id: '/modules/interoperability/endpoint/isChainNameAvailableRequest',
    type: 'object',
    required: ['name'],
    properties: {
        name: {
            dataType: 'string',
            fieldNumber: 1,
            minLength: constants_2.MIN_CHAIN_NAME_LENGTH,
            maxLength: constants_2.MAX_CHAIN_NAME_LENGTH,
        },
    },
};
exports.isChainNameAvailableResponseSchema = {
    ...exports.isChainIDAvailableResponseSchema,
    $id: '/modules/interoperability/endpoint/isChainNameAvailableResponseSchema',
};
exports.getMainchainIDRequestSchema = {
    ...exports.isChainIDAvailableRequestSchema,
    $id: '/modules/interoperability/endpoint/getMainchainIDRequestSchema',
};
exports.getMainchainIDResponseSchema = {
    $id: '/modules/interoperability/endpoint/getMainchainIDResponseSchema',
    type: 'object',
    required: ['mainchainID'],
    properties: {
        result: {
            type: 'string',
        },
    },
};
exports.getChannelRequestSchema = exports.getChainAccountRequestSchema;
exports.getTerminatedStateAccountRequestSchema = exports.getChainAccountRequestSchema;
exports.getTerminatedOutboxAccountRequestSchema = exports.getChainAccountRequestSchema;
exports.getCCMSchemaResponseSchema = {
    $id: '/modules/interoperability/endpoint/getCCMSchemaResponseSchema',
    type: 'object',
    required: ['schema'],
    properties: {
        schema: { ...exports.ccmSchema },
    },
};
exports.genesisInteroperabilitySchema = {
    $id: '/interoperability/module/genesis',
    type: 'object',
    required: [
        'ownChainName',
        'ownChainNonce',
        'chainInfos',
        'terminatedStateAccounts',
        'terminatedOutboxAccounts',
    ],
    properties: {
        ownChainName: {
            dataType: 'string',
            maxLength: constants_2.MAX_CHAIN_NAME_LENGTH,
            fieldNumber: 1,
        },
        ownChainNonce: {
            dataType: 'uint64',
            fieldNumber: 2,
        },
        chainInfos: {
            type: 'array',
            fieldNumber: 3,
            items: {
                type: 'object',
                required: ['chainID', 'chainData', 'channelData', 'chainValidators'],
                properties: {
                    chainID: {
                        dataType: 'bytes',
                        minLength: constants_1.CHAIN_ID_LENGTH,
                        maxLength: constants_1.CHAIN_ID_LENGTH,
                        fieldNumber: 1,
                    },
                    chainData: {
                        ...chain_account_1.chainDataSchema,
                        fieldNumber: 2,
                    },
                    channelData: {
                        ...channel_data_1.channelSchema,
                        fieldNumber: 3,
                    },
                    chainValidators: {
                        ...chain_validators_1.chainValidatorsSchema,
                        fieldNumber: 4,
                    },
                },
            },
        },
        terminatedStateAccounts: {
            type: 'array',
            fieldNumber: 4,
            items: {
                type: 'object',
                required: ['chainID', 'terminatedStateAccount'],
                properties: {
                    chainID: {
                        dataType: 'bytes',
                        minLength: constants_1.CHAIN_ID_LENGTH,
                        maxLength: constants_1.CHAIN_ID_LENGTH,
                        fieldNumber: 1,
                    },
                    terminatedStateAccount: {
                        ...terminated_state_1.terminatedStateSchema,
                        fieldNumber: 2,
                    },
                },
            },
        },
        terminatedOutboxAccounts: {
            type: 'array',
            fieldNumber: 5,
            items: {
                type: 'object',
                required: ['chainID', 'terminatedOutboxAccount'],
                properties: {
                    chainID: {
                        dataType: 'bytes',
                        minLength: constants_1.CHAIN_ID_LENGTH,
                        maxLength: constants_1.CHAIN_ID_LENGTH,
                        fieldNumber: 1,
                    },
                    terminatedOutboxAccount: {
                        ...terminated_outbox_1.terminatedOutboxSchema,
                        fieldNumber: 2,
                    },
                },
            },
        },
    },
};
exports.getRegistrationFeeSchema = {
    $id: '/modules/interoperability/mainchain/registrationFee',
    type: 'object',
    required: ['registrationFee'],
    properties: {
        registrationFee: {
            type: 'string',
        },
    },
};
exports.getMinimumMessageFeeResponseSchema = {
    $id: '/modules/interoperability/mainchain/minimumMessageFeeResponse',
    type: 'object',
    required: ['fee'],
    properties: {
        fee: {
            type: 'string',
        },
    },
};
//# sourceMappingURL=schemas.js.map