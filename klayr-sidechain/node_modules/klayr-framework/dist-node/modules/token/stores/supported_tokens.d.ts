/// <reference types="node" />
import { BaseStore, ImmutableStoreGetter, StoreGetter } from '../../base_store';
export interface SupportedTokensStoreData {
    supportedTokenIDs: Buffer[];
}
export declare const supportedTokensStoreSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        supportedTokenIDs: {
            type: string;
            fieldNumber: number;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
        };
    };
};
export declare const ALL_SUPPORTED_TOKENS_KEY: Buffer;
export declare class SupportedTokensStore extends BaseStore<SupportedTokensStoreData> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            supportedTokenIDs: {
                type: string;
                fieldNumber: number;
                items: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                };
            };
        };
    };
    private _ownChainID;
    registerOwnChainID(ownChainID: Buffer): void;
    allSupported(context: ImmutableStoreGetter): Promise<boolean>;
    isSupported(context: ImmutableStoreGetter, tokenID: Buffer): Promise<boolean>;
    getAll(context: ImmutableStoreGetter): Promise<{
        key: Buffer;
        value: SupportedTokensStoreData;
    }[]>;
    removeAll(context: StoreGetter): Promise<void>;
    supportAll(context: StoreGetter): Promise<void>;
    supportChain(context: StoreGetter, chainID: Buffer): Promise<void>;
    removeSupportForChain(context: StoreGetter, chainID: Buffer): Promise<void>;
    supportToken(context: StoreGetter, tokenID: Buffer): Promise<void>;
    removeSupportForToken(context: StoreGetter, tokenID: Buffer): Promise<void>;
    private _isMainchainOrNative;
}
