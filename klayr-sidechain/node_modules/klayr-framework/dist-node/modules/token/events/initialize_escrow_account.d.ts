/// <reference types="node" />
import { BaseEvent, EventQueuer } from '../../base_event';
import { TokenEventResult, TokenErrorEventResult } from '../constants';
export interface InitializeEscrowAccountEventData {
    chainID: Buffer;
    tokenID: Buffer;
    initializationFee: bigint;
}
export declare const initializeEscrowAccountEventSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        tokenID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        initializationFee: {
            dataType: string;
            fieldNumber: number;
        };
        result: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare class InitializeEscrowAccountEvent extends BaseEvent<InitializeEscrowAccountEventData & {
    result: TokenEventResult;
}> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            chainID: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            tokenID: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            initializationFee: {
                dataType: string;
                fieldNumber: number;
            };
            result: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    log(ctx: EventQueuer, data: InitializeEscrowAccountEventData): void;
    error(ctx: EventQueuer, data: InitializeEscrowAccountEventData, result: TokenErrorEventResult): void;
}
