import { CommandVerifyContext, VerificationResult, CommandExecuteContext } from '../../../state_machine';
import { BaseCommand } from '../../base_command';
import { PomCommandDependencies, PomTransactionParams, TokenID, PunishmentLockingPeriods } from '../types';
export declare class ReportMisbehaviorCommand extends BaseCommand {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            header1: {
                dataType: string;
                fieldNumber: number;
            };
            header2: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    private _tokenMethod;
    private _validatorsMethod;
    private _posTokenID;
    private _factorSelfStakes;
    private _lockingPeriodSelfStaking;
    private _reportMisbehaviorReward;
    private _reportMisbehaviorLimitBanned;
    private _punishmentLockingPeriods;
    addDependencies(args: PomCommandDependencies): void;
    init(args: {
        posTokenID: TokenID;
        factorSelfStakes: number;
        lockingPeriodSelfStaking: number;
        reportMisbehaviorReward: bigint;
        reportMisbehaviorLimitBanned: number;
        punishmentLockingPeriods: PunishmentLockingPeriods;
    }): void;
    verify(context: CommandVerifyContext<PomTransactionParams>): Promise<VerificationResult>;
    execute(context: CommandExecuteContext<PomTransactionParams>): Promise<void>;
}
