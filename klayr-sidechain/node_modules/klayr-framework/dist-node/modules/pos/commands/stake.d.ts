import { CommandVerifyContext, VerificationResult, CommandExecuteContext } from '../../../state_machine';
import { BaseCommand } from '../../base_command';
import { InternalMethod } from '../internal_method';
import { TokenMethod, TokenID, StakeTransactionParams } from '../types';
export declare class StakeCommand extends BaseCommand {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            stakes: {
                type: string;
                fieldNumber: number;
                minItems: number;
                maxItems: number;
                items: {
                    type: string;
                    required: string[];
                    properties: {
                        validatorAddress: {
                            dataType: string;
                            fieldNumber: number;
                            format: string;
                        };
                        amount: {
                            dataType: string;
                            fieldNumber: number;
                        };
                    };
                };
            };
        };
    };
    private _tokenMethod;
    private _posTokenID;
    private _internalMethod;
    private _factorSelfStakes;
    private _baseStakeAmount;
    private _maxNumberPendingUnlocks;
    private _maxNumberSentStakes;
    addDependencies(args: {
        tokenMethod: TokenMethod;
        internalMethod: InternalMethod;
    }): void;
    init(args: {
        posTokenID: TokenID;
        factorSelfStakes: number;
        baseStakeAmount: bigint;
        maxNumberPendingUnlocks: number;
        maxNumberSentStakes: number;
    }): void;
    verify(context: CommandVerifyContext<StakeTransactionParams>): Promise<VerificationResult>;
    execute(context: CommandExecuteContext<StakeTransactionParams>): Promise<void>;
}
