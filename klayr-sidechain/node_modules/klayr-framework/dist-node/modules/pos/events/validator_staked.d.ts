/// <reference types="node" />
import { BaseEvent, EventQueuer } from '../../base_event';
import { PoSEventResult } from '../constants';
export interface ValidatorStakedEventData {
    senderAddress: Buffer;
    validatorAddress: Buffer;
    amount: bigint;
}
export declare const validatorStakedDataSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        senderAddress: {
            dataType: string;
            fieldNumber: number;
            format: string;
        };
        validatorAddress: {
            dataType: string;
            fieldNumber: number;
            format: string;
        };
        amount: {
            dataType: string;
            fieldNumber: number;
        };
        result: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare class ValidatorStakedEvent extends BaseEvent<ValidatorStakedEventData & {
    result: PoSEventResult;
}> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            senderAddress: {
                dataType: string;
                fieldNumber: number;
                format: string;
            };
            validatorAddress: {
                dataType: string;
                fieldNumber: number;
                format: string;
            };
            amount: {
                dataType: string;
                fieldNumber: number;
            };
            result: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    log(ctx: EventQueuer, data: ValidatorStakedEventData): void;
    error(ctx: EventQueuer, data: ValidatorStakedEventData, result: PoSEventResult): void;
}
