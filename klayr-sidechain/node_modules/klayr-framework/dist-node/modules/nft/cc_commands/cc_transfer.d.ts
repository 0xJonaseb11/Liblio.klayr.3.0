import { NFTMethod } from '../method';
import { InternalMethod } from '../internal_method';
import { BaseCCCommand } from '../../interoperability/base_cc_command';
import { CrossChainMessageContext } from '../../interoperability/types';
import { FeeMethod } from '../types';
export declare class CrossChainTransferCommand extends BaseCCCommand {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            nftID: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            senderAddress: {
                dataType: string;
                format: string;
                fieldNumber: number;
            };
            recipientAddress: {
                dataType: string;
                format: string;
                fieldNumber: number;
            };
            attributesArray: {
                type: string;
                fieldNumber: number;
                items: {
                    type: string;
                    required: string[];
                    properties: {
                        module: {
                            dataType: string;
                            minLength: number;
                            maxLength: number;
                            pattern: string;
                            fieldNumber: number;
                        };
                        attributes: {
                            dataType: string;
                            fieldNumber: number;
                        };
                    };
                };
            };
            data: {
                dataType: string;
                maxLength: number;
                fieldNumber: number;
            };
        };
    };
    private _method;
    private _internalMethod;
    private _feeMethod;
    get name(): string;
    init(args: {
        method: NFTMethod;
        internalMethod: InternalMethod;
        feeMethod: FeeMethod;
    }): void;
    verify(context: CrossChainMessageContext): Promise<void>;
    execute(context: CrossChainMessageContext): Promise<void>;
}
