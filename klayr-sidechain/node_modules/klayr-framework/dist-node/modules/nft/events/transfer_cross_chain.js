"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferCrossChainEvent = exports.transferCrossChainEventSchema = void 0;
const base_event_1 = require("../../base_event");
const constants_1 = require("../constants");
exports.transferCrossChainEventSchema = {
    $id: '/nft/events/transferCrossChain',
    type: 'object',
    required: ['senderAddress', 'recipientAddress', 'nftID', 'receivingChainID', 'result'],
    properties: {
        senderAddress: {
            dataType: 'bytes',
            format: 'klayr32',
            fieldNumber: 1,
        },
        recipientAddress: {
            dataType: 'bytes',
            format: 'klayr32',
            fieldNumber: 2,
        },
        nftID: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_NFT_ID,
            maxLength: constants_1.LENGTH_NFT_ID,
            fieldNumber: 3,
        },
        receivingChainID: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_CHAIN_ID,
            maxLength: constants_1.LENGTH_CHAIN_ID,
            fieldNumber: 4,
        },
        includeAttributes: {
            dataType: 'boolean',
            fieldNumber: 5,
        },
        result: {
            dataType: 'uint32',
            fieldNumber: 6,
        },
    },
};
class TransferCrossChainEvent extends base_event_1.BaseEvent {
    constructor() {
        super(...arguments);
        this.schema = exports.transferCrossChainEventSchema;
    }
    log(ctx, data) {
        this.add(ctx, { ...data, result: 0 }, [
            data.senderAddress,
            data.recipientAddress,
            data.receivingChainID,
        ]);
    }
    error(ctx, data, result) {
        this.add(ctx, { ...data, result }, [data.senderAddress, data.recipientAddress, data.receivingChainID], true);
    }
}
exports.TransferCrossChainEvent = TransferCrossChainEvent;
//# sourceMappingURL=transfer_cross_chain.js.map