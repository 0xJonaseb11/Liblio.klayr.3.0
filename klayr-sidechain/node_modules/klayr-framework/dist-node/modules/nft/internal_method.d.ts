/// <reference types="node" />
import { BaseMethod } from '../base_method';
import { NFTAttributes } from './stores/nft';
import { InteroperabilityMethod, ModuleConfig, NFTMethod, TokenMethod } from './types';
import { ImmutableMethodContext, MethodContext } from '../../state_machine';
import { NftErrorEventResult } from './constants';
export declare class TransferVerifyError extends Error {
    code: NftErrorEventResult;
    constructor(message: string, code: NftErrorEventResult);
}
export declare class InternalMethod extends BaseMethod {
    private _config;
    private _nftMethod;
    private _interoperabilityMethod;
    private _tokenMethod;
    init(config: ModuleConfig): void;
    addDependencies(nftMethod: NFTMethod, interoperabilityMethod: InteroperabilityMethod, tokenMethod: TokenMethod): void;
    createEscrowEntry(methodContext: MethodContext, receivingChainID: Buffer, nftID: Buffer): Promise<void>;
    createUserEntry(methodContext: MethodContext, address: Buffer, nftID: Buffer): Promise<void>;
    createNFTEntry(methodContext: MethodContext, address: Buffer, nftID: Buffer, attributesArray: NFTAttributes[]): Promise<void>;
    hasDuplicateModuleNames(attributesArray: NFTAttributes[]): boolean;
    verifyTransfer(immutableMethodContext: ImmutableMethodContext, senderAddress: Buffer, nftID: Buffer): Promise<void>;
    verifyTransferCrossChain(immutableMethodContext: ImmutableMethodContext, senderAddress: Buffer, nftID: Buffer, sendingChainID: Buffer, receivingChainID: Buffer, messageFee: bigint, data: string): Promise<void>;
    transfer(methodContext: MethodContext, recipientAddress: Buffer, nftID: Buffer): Promise<void>;
    transferCrossChain(methodContext: MethodContext, senderAddress: Buffer, recipientAddress: Buffer, nftID: Buffer, receivingChainID: Buffer, messageFee: bigint, data: string, includeAttributes: boolean, timestamp?: number): Promise<void>;
    getOwnChainID(): Buffer;
    getNewAttributes(_nftID: Buffer, storedAttributes: NFTAttributes[], _receivedAttributes: NFTAttributes[]): NFTAttributes[];
}
