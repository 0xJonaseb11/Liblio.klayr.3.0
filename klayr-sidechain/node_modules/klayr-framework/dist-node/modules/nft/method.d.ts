/// <reference types="node" />
import { BaseMethod } from '../base_method';
import { FeeMethod, ModuleConfig, NFT } from './types';
import { NFTAttributes } from './stores/nft';
import { ImmutableMethodContext, MethodContext } from '../../state_machine';
import { InternalMethod } from './internal_method';
export declare class NFTMethod extends BaseMethod {
    private _config;
    private _internalMethod;
    private _feeMethod;
    init(config: ModuleConfig): void;
    addDependencies(internalMethod: InternalMethod, feeMethod: FeeMethod): void;
    getChainID(nftID: Buffer): Buffer;
    isNFTEscrowed(nft: NFT): boolean;
    isNFTLocked(nft: NFT): boolean;
    getNFT(methodContext: ImmutableMethodContext, nftID: Buffer): Promise<NFT>;
    destroy(methodContext: MethodContext, address: Buffer, nftID: Buffer): Promise<void>;
    getCollectionID(nftID: Buffer): Buffer;
    isNFTSupported(methodContext: ImmutableMethodContext, nftID: Buffer): Promise<boolean>;
    getNextAvailableIndex(methodContext: MethodContext, collectionID: Buffer): Promise<bigint>;
    create(methodContext: MethodContext, address: Buffer, collectionID: Buffer, attributesArray: NFTAttributes[]): Promise<void>;
    lock(methodContext: MethodContext, module: string, nftID: Buffer): Promise<void>;
    unlock(methodContext: MethodContext, module: string, nftID: Buffer): Promise<void>;
    transfer(methodContext: MethodContext, senderAddress: Buffer, recipientAddress: Buffer, nftID: Buffer): Promise<void>;
    transferCrossChain(methodContext: MethodContext, senderAddress: Buffer, recipientAddress: Buffer, nftID: Buffer, receivingChainID: Buffer, messageFee: bigint, data: string, includeAttributes: boolean): Promise<void>;
    supportAllNFTs(methodContext: MethodContext): Promise<void>;
    removeSupportAllNFTs(methodContext: MethodContext): Promise<void>;
    supportAllNFTsFromChain(methodContext: MethodContext, chainID: Buffer): Promise<void>;
    removeSupportAllNFTsFromChain(methodContext: MethodContext, chainID: Buffer): Promise<void>;
    supportAllNFTsFromCollection(methodContext: MethodContext, chainID: Buffer, collectionID: Buffer): Promise<void>;
    removeSupportAllNFTsFromCollection(methodContext: MethodContext, chainID: Buffer, collectionID: Buffer): Promise<void>;
    recover(methodContext: MethodContext, terminatedChainID: Buffer, substorePrefix: Buffer, nftID: Buffer, nft: Buffer): Promise<void>;
    setAttributes(methodContext: MethodContext, module: string, nftID: Buffer, attributes: Buffer): Promise<void>;
}
