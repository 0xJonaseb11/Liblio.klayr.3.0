/// <reference types="node" />
import { BaseEvent, EventQueuer } from '../../base_event';
export interface RelayerFeeProcessedData {
    ccmID: Buffer;
    relayerAddress: Buffer;
    burntAmount: bigint;
    relayerAmount: bigint;
}
export declare const relayerFeeProcessedSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        ccmID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        relayerAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        burntAmount: {
            dataType: string;
            fieldNumber: number;
        };
        relayerAmount: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare class RelayerFeeProcessedEvent extends BaseEvent<RelayerFeeProcessedData> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            ccmID: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            relayerAddress: {
                dataType: string;
                format: string;
                fieldNumber: number;
            };
            burntAmount: {
                dataType: string;
                fieldNumber: number;
            };
            relayerAmount: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    log(ctx: EventQueuer, data: RelayerFeeProcessedData): void;
}
