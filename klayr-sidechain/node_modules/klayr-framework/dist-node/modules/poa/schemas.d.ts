export declare const configSchema: {
    $id: string;
    type: string;
    properties: {
        authorityRegistrationFee: {
            type: string;
            format: string;
        };
    };
};
export declare const registerAuthoritySchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        name: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        blsKey: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        proofOfPossession: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        generatorKey: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
    };
};
export declare const updateGeneratorKeySchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        generatorKey: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
    };
};
export declare const updateAuthoritySchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        newValidators: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    weight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
            minItems: number;
            maxItems: number;
        };
        threshold: {
            dataType: string;
            fieldNumber: number;
        };
        validatorsUpdateNonce: {
            dataType: string;
            fieldNumber: number;
        };
        signature: {
            dataType: string;
            fieldNumber: number;
        };
        aggregationBits: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const validatorSignatureMessageSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        newValidators: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    weight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        threshold: {
            dataType: string;
            fieldNumber: number;
        };
        validatorsUpdateNonce: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const genesisPoAStoreSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        validators: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    name: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    blsKey: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    proofOfPossession: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    generatorKey: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                };
            };
        };
        snapshotSubstore: {
            type: string;
            fieldNumber: number;
            properties: {
                activeValidators: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            address: {
                                dataType: string;
                                minLength: number;
                                maxLength: number;
                                fieldNumber: number;
                            };
                            weight: {
                                dataType: string;
                                fieldNumber: number;
                            };
                        };
                    };
                    minItems: number;
                    maxItems: number;
                };
                threshold: {
                    dataType: string;
                    fieldNumber: number;
                };
            };
            required: string[];
        };
    };
};
export declare const getValidatorRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            dataType: string;
            format: string;
        };
    };
};
export declare const getValidatorResponseSchema: {
    type: string;
    required: string[];
    properties: {
        address: {
            type: string;
            format: string;
        };
        name: {
            type: string;
        };
        weight: {
            type: string;
            format: string;
        };
    };
    $id: string;
};
export declare const getAllValidatorsResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        validators: {
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        type: string;
                        format: string;
                    };
                    name: {
                        type: string;
                    };
                    weight: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
};
export declare const getRegistrationFeeResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        fee: {
            type: string;
        };
    };
};
