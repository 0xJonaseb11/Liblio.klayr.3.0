import { BaseCommand } from '../../base_command';
import { CommandExecuteContext, CommandVerifyContext, VerificationResult } from '../../../state_machine';
import { UpdateAuthorityParams, ValidatorsMethod } from '../types';
export declare class UpdateAuthorityCommand extends BaseCommand {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            newValidators: {
                type: string;
                fieldNumber: number;
                items: {
                    type: string;
                    required: string[];
                    properties: {
                        address: {
                            dataType: string;
                            minLength: number;
                            maxLength: number;
                            fieldNumber: number;
                        };
                        weight: {
                            dataType: string;
                            fieldNumber: number;
                        };
                    };
                };
                minItems: number;
                maxItems: number;
            };
            threshold: {
                dataType: string;
                fieldNumber: number;
            };
            validatorsUpdateNonce: {
                dataType: string;
                fieldNumber: number;
            };
            signature: {
                dataType: string;
                fieldNumber: number;
            };
            aggregationBits: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    private _validatorsMethod;
    get name(): string;
    addDependencies(validatorsMethod: ValidatorsMethod): void;
    verify(context: CommandVerifyContext<UpdateAuthorityParams>): Promise<VerificationResult>;
    execute(context: CommandExecuteContext<UpdateAuthorityParams>): Promise<void>;
}
