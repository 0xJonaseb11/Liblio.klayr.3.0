import { BaseCommand } from '../../base_command';
import { CommandExecuteContext, CommandVerifyContext, VerificationResult } from '../../../state_machine';
import { RegisterAuthorityParams, ValidatorsMethod, FeeMethod } from '../types';
export declare class RegisterAuthorityCommand extends BaseCommand {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            name: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            blsKey: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            proofOfPossession: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            generatorKey: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
        };
    };
    private _validatorsMethod;
    private _feeMethod;
    private _authorityRegistrationFee;
    get name(): string;
    init(args: {
        authorityRegistrationFee: bigint;
    }): void;
    addDependencies(validatorsMethod: ValidatorsMethod, feeMethod: FeeMethod): void;
    verify(context: CommandVerifyContext<RegisterAuthorityParams>): Promise<VerificationResult>;
    execute(context: CommandExecuteContext<RegisterAuthorityParams>): Promise<void>;
}
