/// <reference types="node" />
import { BaseStore, ImmutableStoreGetter } from '../../base_store';
export interface AuthAccount {
    nonce: bigint;
    numberOfSignatures: number;
    mandatoryKeys: Buffer[];
    optionalKeys: Buffer[];
}
export declare const authAccountSchema: {
    $id: string;
    type: string;
    properties: {
        nonce: {
            dataType: string;
            fieldNumber: number;
        };
        numberOfSignatures: {
            dataType: string;
            fieldNumber: number;
            minimum: number;
            maximum: number;
        };
        mandatoryKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            minItems: number;
            maxItems: number;
            fieldNumber: number;
        };
        optionalKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            minItems: number;
            maxItems: number;
            fieldNumber: number;
        };
    };
    required: string[];
};
export declare class AuthAccountStore extends BaseStore<AuthAccount> {
    schema: {
        $id: string;
        type: string;
        properties: {
            nonce: {
                dataType: string;
                fieldNumber: number;
            };
            numberOfSignatures: {
                dataType: string;
                fieldNumber: number;
                minimum: number;
                maximum: number;
            };
            mandatoryKeys: {
                type: string;
                items: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                };
                minItems: number;
                maxItems: number;
                fieldNumber: number;
            };
            optionalKeys: {
                type: string;
                items: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                };
                minItems: number;
                maxItems: number;
                fieldNumber: number;
            };
        };
        required: string[];
    };
    getOrDefault(context: ImmutableStoreGetter, address: Buffer): Promise<AuthAccount>;
}
