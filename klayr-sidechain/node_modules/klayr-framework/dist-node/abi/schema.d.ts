import { blockHeaderSchema, blockSchema } from '@klayr/chain';
export { blockHeaderSchema, blockSchema };
export declare const eventSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        module: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        name: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        data: {
            dataType: string;
            fieldNumber: number;
        };
        topics: {
            type: string;
            fieldNumber: number;
            items: {
                dataType: string;
            };
        };
        height: {
            dataType: string;
            fieldNumber: number;
        };
        index: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const validatorSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            fieldNumber: number;
            dataType: string;
        };
        bftWeight: {
            fieldNumber: number;
            dataType: string;
        };
        generatorKey: {
            fieldNumber: number;
            dataType: string;
        };
        blsKey: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const initRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        chainID: {
            fieldNumber: number;
            dataType: string;
        };
        lastBlockHeight: {
            fieldNumber: number;
            dataType: string;
        };
        lastStateRoot: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const initResponseSchema: {
    $id: string;
    type: string;
    required: never[];
    properties: {};
};
export declare const initStateMachineRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        header: {
            $id: string;
            required: string[];
            properties: {
                signature: {
                    dataType: string;
                    fieldNumber: number;
                };
                version: {
                    dataType: string;
                    fieldNumber: number;
                };
                timestamp: {
                    dataType: string;
                    fieldNumber: number;
                };
                height: {
                    dataType: string;
                    fieldNumber: number;
                };
                previousBlockID: {
                    dataType: string;
                    fieldNumber: number;
                };
                generatorAddress: {
                    dataType: string;
                    fieldNumber: number;
                    format: string;
                };
                transactionRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                assetRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                eventRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                stateRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                maxHeightPrevoted: {
                    dataType: string;
                    fieldNumber: number;
                };
                maxHeightGenerated: {
                    dataType: string;
                    fieldNumber: number;
                };
                impliesMaxPrevotes: {
                    dataType: string;
                    fieldNumber: number;
                };
                validatorsHash: {
                    dataType: string;
                    fieldNumber: number;
                };
                aggregateCommit: {
                    type: string;
                    fieldNumber: number;
                    required: string[];
                    properties: {
                        height: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        aggregationBits: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        certificateSignature: {
                            dataType: string;
                            fieldNumber: number;
                        };
                    };
                };
            };
            type: string;
            fieldNumber: number;
        };
    };
};
export declare const initStateMachineResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const initGenesisStateRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const initGenesisStateResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        events: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    name: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    topics: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            dataType: string;
                        };
                    };
                    height: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    index: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        preCommitThreshold: {
            fieldNumber: number;
            dataType: string;
        };
        certificateThreshold: {
            fieldNumber: number;
            dataType: string;
        };
        nextValidators: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    address: {
                        fieldNumber: number;
                        dataType: string;
                    };
                    bftWeight: {
                        fieldNumber: number;
                        dataType: string;
                    };
                    generatorKey: {
                        fieldNumber: number;
                        dataType: string;
                    };
                    blsKey: {
                        fieldNumber: number;
                        dataType: string;
                    };
                };
            };
        };
    };
};
export declare const insertAssetsRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
        finalizedHeight: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const insertAssetsResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        assets: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
    };
};
export declare const verifyAssetsRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
        assets: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
    };
};
export declare const verifyAssetsResponseSchema: {
    $id: string;
    type: string;
    properties: {};
};
export declare const beforeTransactionsExecuteRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
        assets: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
    };
};
export declare const beforeTransactionsExecuteResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        events: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    name: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    topics: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            dataType: string;
                        };
                    };
                    height: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    index: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
    };
};
export declare const afterTransactionsExecuteRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
        assets: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        transactions: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    command: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    nonce: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    fee: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    senderPublicKey: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    params: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    signatures: {
                        type: string;
                        items: {
                            dataType: string;
                        };
                        fieldNumber: number;
                    };
                };
            };
        };
    };
};
export declare const afterTransactionsExecuteResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        events: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    name: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    topics: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            dataType: string;
                        };
                    };
                    height: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    index: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        preCommitThreshold: {
            fieldNumber: number;
            dataType: string;
        };
        certificateThreshold: {
            fieldNumber: number;
            dataType: string;
        };
        nextValidators: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    address: {
                        fieldNumber: number;
                        dataType: string;
                    };
                    bftWeight: {
                        fieldNumber: number;
                        dataType: string;
                    };
                    generatorKey: {
                        fieldNumber: number;
                        dataType: string;
                    };
                    blsKey: {
                        fieldNumber: number;
                        dataType: string;
                    };
                };
            };
        };
    };
};
export declare const verifyTransactionRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
        transaction: {
            $id: string;
            type: string;
            required: string[];
            properties: {
                module: {
                    dataType: string;
                    fieldNumber: number;
                    minLength: number;
                    maxLength: number;
                };
                command: {
                    dataType: string;
                    fieldNumber: number;
                    minLength: number;
                    maxLength: number;
                };
                nonce: {
                    dataType: string;
                    fieldNumber: number;
                };
                fee: {
                    dataType: string;
                    fieldNumber: number;
                };
                senderPublicKey: {
                    dataType: string;
                    fieldNumber: number;
                    minLength: number;
                    maxLength: number;
                };
                params: {
                    dataType: string;
                    fieldNumber: number;
                };
                signatures: {
                    type: string;
                    items: {
                        dataType: string;
                    };
                    fieldNumber: number;
                };
            };
            fieldNumber: number;
        };
        header: {
            $id: string;
            required: string[];
            properties: {
                signature: {
                    dataType: string;
                    fieldNumber: number;
                };
                version: {
                    dataType: string;
                    fieldNumber: number;
                };
                timestamp: {
                    dataType: string;
                    fieldNumber: number;
                };
                height: {
                    dataType: string;
                    fieldNumber: number;
                };
                previousBlockID: {
                    dataType: string;
                    fieldNumber: number;
                };
                generatorAddress: {
                    dataType: string;
                    fieldNumber: number;
                    format: string;
                };
                transactionRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                assetRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                eventRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                stateRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                maxHeightPrevoted: {
                    dataType: string;
                    fieldNumber: number;
                };
                maxHeightGenerated: {
                    dataType: string;
                    fieldNumber: number;
                };
                impliesMaxPrevotes: {
                    dataType: string;
                    fieldNumber: number;
                };
                validatorsHash: {
                    dataType: string;
                    fieldNumber: number;
                };
                aggregateCommit: {
                    type: string;
                    fieldNumber: number;
                    required: string[];
                    properties: {
                        height: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        aggregationBits: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        certificateSignature: {
                            dataType: string;
                            fieldNumber: number;
                        };
                    };
                };
            };
            type: string;
            fieldNumber: number;
        };
        onlyCommand: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const verifyTransactionResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        result: {
            fieldNumber: number;
            dataType: string;
        };
        errorMessage: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const executeTransactionRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
        transaction: {
            $id: string;
            type: string;
            required: string[];
            properties: {
                module: {
                    dataType: string;
                    fieldNumber: number;
                    minLength: number;
                    maxLength: number;
                };
                command: {
                    dataType: string;
                    fieldNumber: number;
                    minLength: number;
                    maxLength: number;
                };
                nonce: {
                    dataType: string;
                    fieldNumber: number;
                };
                fee: {
                    dataType: string;
                    fieldNumber: number;
                };
                senderPublicKey: {
                    dataType: string;
                    fieldNumber: number;
                    minLength: number;
                    maxLength: number;
                };
                params: {
                    dataType: string;
                    fieldNumber: number;
                };
                signatures: {
                    type: string;
                    items: {
                        dataType: string;
                    };
                    fieldNumber: number;
                };
            };
            fieldNumber: number;
        };
        assets: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        dryRun: {
            fieldNumber: number;
            dataType: string;
        };
        header: {
            $id: string;
            required: string[];
            properties: {
                signature: {
                    dataType: string;
                    fieldNumber: number;
                };
                version: {
                    dataType: string;
                    fieldNumber: number;
                };
                timestamp: {
                    dataType: string;
                    fieldNumber: number;
                };
                height: {
                    dataType: string;
                    fieldNumber: number;
                };
                previousBlockID: {
                    dataType: string;
                    fieldNumber: number;
                };
                generatorAddress: {
                    dataType: string;
                    fieldNumber: number;
                    format: string;
                };
                transactionRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                assetRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                eventRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                stateRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                maxHeightPrevoted: {
                    dataType: string;
                    fieldNumber: number;
                };
                maxHeightGenerated: {
                    dataType: string;
                    fieldNumber: number;
                };
                impliesMaxPrevotes: {
                    dataType: string;
                    fieldNumber: number;
                };
                validatorsHash: {
                    dataType: string;
                    fieldNumber: number;
                };
                aggregateCommit: {
                    type: string;
                    fieldNumber: number;
                    required: string[];
                    properties: {
                        height: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        aggregationBits: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        certificateSignature: {
                            dataType: string;
                            fieldNumber: number;
                        };
                    };
                };
            };
            type: string;
            fieldNumber: number;
        };
    };
};
export declare const executeTransactionResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        events: {
            fieldNumber: number;
            type: string;
            items: {
                $id: string;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    name: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    data: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    topics: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            dataType: string;
                        };
                    };
                    height: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    index: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        result: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const commitRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
        stateRoot: {
            fieldNumber: number;
            dataType: string;
        };
        expectedStateRoot: {
            fieldNumber: number;
            dataType: string;
        };
        dryRun: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const commitResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        stateRoot: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const revertRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        contextID: {
            fieldNumber: number;
            dataType: string;
        };
        stateRoot: {
            fieldNumber: number;
            dataType: string;
        };
        expectedStateRoot: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const revertResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        stateRoot: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const finalizeRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        finalizedHeight: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const finalizeResponseSchema: {
    $id: string;
    type: string;
    properties: {};
};
export declare const clearRequestSchema: {
    $id: string;
    type: string;
    required: never[];
    properties: {};
};
export declare const clearResponseSchema: {
    $id: string;
    type: string;
    properties: {};
};
export declare const metadataRequestSchema: {
    $id: string;
    type: string;
    properties: {};
};
export declare const metadataResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        data: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const queryRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        method: {
            fieldNumber: number;
            dataType: string;
        };
        params: {
            fieldNumber: number;
            dataType: string;
        };
        header: {
            $id: string;
            required: string[];
            properties: {
                signature: {
                    dataType: string;
                    fieldNumber: number;
                };
                version: {
                    dataType: string;
                    fieldNumber: number;
                };
                timestamp: {
                    dataType: string;
                    fieldNumber: number;
                };
                height: {
                    dataType: string;
                    fieldNumber: number;
                };
                previousBlockID: {
                    dataType: string;
                    fieldNumber: number;
                };
                generatorAddress: {
                    dataType: string;
                    fieldNumber: number;
                    format: string;
                };
                transactionRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                assetRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                eventRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                stateRoot: {
                    dataType: string;
                    fieldNumber: number;
                };
                maxHeightPrevoted: {
                    dataType: string;
                    fieldNumber: number;
                };
                maxHeightGenerated: {
                    dataType: string;
                    fieldNumber: number;
                };
                impliesMaxPrevotes: {
                    dataType: string;
                    fieldNumber: number;
                };
                validatorsHash: {
                    dataType: string;
                    fieldNumber: number;
                };
                aggregateCommit: {
                    type: string;
                    fieldNumber: number;
                    required: string[];
                    properties: {
                        height: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        aggregationBits: {
                            dataType: string;
                            fieldNumber: number;
                        };
                        certificateSignature: {
                            dataType: string;
                            fieldNumber: number;
                        };
                    };
                };
            };
            type: string;
            fieldNumber: number;
        };
    };
};
export declare const queryResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        data: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const proveRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        stateRoot: {
            fieldNumber: number;
            dataType: string;
        };
        keys: {
            fieldNumber: number;
            type: string;
            items: {
                dataType: string;
            };
        };
    };
};
export declare const proveResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        proof: {
            fieldNumber: number;
            type: string;
            required: string[];
            properties: {
                siblingHashes: {
                    fieldNumber: number;
                    type: string;
                    items: {
                        dataType: string;
                    };
                };
                queries: {
                    fieldNumber: number;
                    type: string;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            key: {
                                fieldNumber: number;
                                dataType: string;
                            };
                            value: {
                                fieldNumber: number;
                                dataType: string;
                            };
                            bitmap: {
                                fieldNumber: number;
                                dataType: string;
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const ipcRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        id: {
            fieldNumber: number;
            dataType: string;
        };
        method: {
            fieldNumber: number;
            dataType: string;
        };
        params: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
export declare const ipcResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        id: {
            fieldNumber: number;
            dataType: string;
        };
        success: {
            fieldNumber: number;
            dataType: string;
        };
        error: {
            type: string;
            fieldNumber: number;
            required: string[];
            properties: {
                message: {
                    fieldNumber: number;
                    dataType: string;
                };
            };
        };
        result: {
            fieldNumber: number;
            dataType: string;
        };
    };
};
