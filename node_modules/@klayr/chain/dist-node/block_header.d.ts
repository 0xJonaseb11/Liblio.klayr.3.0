/// <reference types="node" />
import { JSONObject } from './types';
export interface BlockHeaderAttrs {
    readonly version: number;
    readonly height: number;
    readonly generatorAddress: Buffer;
    readonly previousBlockID: Buffer;
    readonly timestamp: number;
    readonly maxHeightPrevoted: number;
    readonly maxHeightGenerated: number;
    readonly impliesMaxPrevotes: boolean;
    readonly aggregateCommit: {
        readonly height: number;
        readonly aggregationBits: Buffer;
        readonly certificateSignature: Buffer;
    };
    readonly validatorsHash?: Buffer;
    readonly stateRoot?: Buffer;
    readonly transactionRoot?: Buffer;
    readonly assetRoot?: Buffer;
    readonly eventRoot?: Buffer;
    signature?: Buffer;
    id?: Buffer;
}
export type BlockHeaderJSON = JSONObject<BlockHeaderAttrs>;
export declare class BlockHeader {
    readonly version: number;
    readonly height: number;
    readonly generatorAddress: Buffer;
    readonly previousBlockID: Buffer;
    readonly timestamp: number;
    readonly maxHeightPrevoted: number;
    readonly maxHeightGenerated: number;
    readonly impliesMaxPrevotes: boolean;
    private _aggregateCommit;
    private _validatorsHash?;
    private _stateRoot?;
    private _transactionRoot?;
    private _assetRoot?;
    private _eventRoot?;
    private _signature?;
    private _id?;
    constructor({ version, timestamp, height, generatorAddress, previousBlockID, maxHeightPrevoted, maxHeightGenerated, impliesMaxPrevotes, aggregateCommit, validatorsHash, stateRoot, eventRoot, assetRoot, transactionRoot, signature, id, }: BlockHeaderAttrs);
    static fromBytes(value: Buffer): BlockHeader;
    static fromJSON(value: Record<string, unknown>): BlockHeader;
    get stateRoot(): Buffer | undefined;
    set stateRoot(val: Buffer | undefined);
    get eventRoot(): Buffer | undefined;
    set eventRoot(val: Buffer | undefined);
    get assetRoot(): Buffer | undefined;
    set assetRoot(val: Buffer | undefined);
    get transactionRoot(): Buffer | undefined;
    set transactionRoot(val: Buffer | undefined);
    get validatorsHash(): Buffer | undefined;
    set validatorsHash(val: Buffer | undefined);
    get aggregateCommit(): {
        height: number;
        aggregationBits: Buffer;
        certificateSignature: Buffer;
    };
    set aggregateCommit(val: {
        height: number;
        aggregationBits: Buffer;
        certificateSignature: Buffer;
    });
    getBytes(): Buffer;
    toJSON(): BlockHeaderJSON;
    toObject(): Required<BlockHeaderAttrs>;
    validate(): void;
    validateGenesis(): void;
    validateSignature(publicKey: Buffer, chainID: Buffer): void;
    getSigningBytes(): Buffer;
    sign(chainID: Buffer, privateKey: Buffer): void;
    get signature(): Buffer;
    get id(): Buffer;
    private _resetComputedValues;
    private _getSigningProps;
    private _getBlockHeaderProps;
    private _getAllProps;
}
