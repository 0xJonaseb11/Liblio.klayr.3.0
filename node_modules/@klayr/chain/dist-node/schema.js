"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.standardEventDataSchema = exports.eventSchema = exports.stateDiffSchema = exports.inclusionProofSchema = exports.blockAssetSchema = exports.blockHeaderSchemaWithId = exports.blockHeaderSchema = exports.signingBlockHeaderSchema = exports.blockSchema = void 0;
const constants_1 = require("./constants");
exports.blockSchema = {
    $id: '/block',
    type: 'object',
    properties: {
        header: {
            dataType: 'bytes',
            fieldNumber: 1,
        },
        transactions: {
            type: 'array',
            items: {
                dataType: 'bytes',
            },
            fieldNumber: 2,
        },
        assets: {
            type: 'array',
            items: {
                dataType: 'bytes',
            },
            fieldNumber: 3,
        },
    },
    required: ['header', 'transactions', 'assets'],
};
exports.signingBlockHeaderSchema = {
    $id: '/block/header/signing/3',
    type: 'object',
    properties: {
        version: { dataType: 'uint32', fieldNumber: 1 },
        timestamp: { dataType: 'uint32', fieldNumber: 2 },
        height: { dataType: 'uint32', fieldNumber: 3 },
        previousBlockID: { dataType: 'bytes', fieldNumber: 4 },
        generatorAddress: { dataType: 'bytes', fieldNumber: 5, format: 'klayr32' },
        transactionRoot: { dataType: 'bytes', fieldNumber: 6 },
        assetRoot: { dataType: 'bytes', fieldNumber: 7 },
        eventRoot: { dataType: 'bytes', fieldNumber: 8 },
        stateRoot: { dataType: 'bytes', fieldNumber: 9 },
        maxHeightPrevoted: { dataType: 'uint32', fieldNumber: 10 },
        maxHeightGenerated: { dataType: 'uint32', fieldNumber: 11 },
        impliesMaxPrevotes: { dataType: 'boolean', fieldNumber: 12 },
        validatorsHash: { dataType: 'bytes', fieldNumber: 13 },
        aggregateCommit: {
            type: 'object',
            fieldNumber: 14,
            required: ['height', 'aggregationBits', 'certificateSignature'],
            properties: {
                height: {
                    dataType: 'uint32',
                    fieldNumber: 1,
                },
                aggregationBits: {
                    dataType: 'bytes',
                    fieldNumber: 2,
                },
                certificateSignature: {
                    dataType: 'bytes',
                    fieldNumber: 3,
                },
            },
        },
    },
    required: [
        'version',
        'timestamp',
        'height',
        'previousBlockID',
        'generatorAddress',
        'transactionRoot',
        'assetRoot',
        'eventRoot',
        'stateRoot',
        'maxHeightPrevoted',
        'maxHeightGenerated',
        'impliesMaxPrevotes',
        'validatorsHash',
        'aggregateCommit',
    ],
};
exports.blockHeaderSchema = {
    ...exports.signingBlockHeaderSchema,
    $id: '/block/header/3/without-id',
    required: [...exports.signingBlockHeaderSchema.required, 'signature'],
    properties: {
        ...exports.signingBlockHeaderSchema.properties,
        signature: { dataType: 'bytes', fieldNumber: 15 },
    },
};
exports.blockHeaderSchemaWithId = {
    ...exports.blockHeaderSchema,
    $id: '/block/header/3',
    required: [...exports.blockHeaderSchema.required, 'id'],
    properties: {
        ...exports.blockHeaderSchema.properties,
        id: { dataType: 'bytes', fieldNumber: 16 },
    },
};
exports.blockAssetSchema = {
    $id: '/block/asset/3',
    type: 'object',
    required: ['module', 'data'],
    properties: {
        module: {
            dataType: 'string',
            fieldNumber: 1,
        },
        data: {
            dataType: 'bytes',
            fieldNumber: 2,
        },
    },
};
exports.inclusionProofSchema = {
    $id: '/storage/inclusionProof',
    type: 'object',
    required: ['siblingHashes', 'queries'],
    properties: {
        siblingHashes: {
            type: 'array',
            fieldNumber: 1,
            items: {
                dataType: 'bytes',
            },
        },
        queries: {
            type: 'array',
            fieldNumber: 2,
            items: {
                type: 'object',
                properties: {
                    key: {
                        dataType: 'bytes',
                        fieldNumber: 1,
                    },
                    value: {
                        dataType: 'bytes',
                        fieldNumber: 2,
                    },
                    bitmap: {
                        dataType: 'bytes',
                        fieldNumber: 3,
                    },
                },
            },
        },
    },
};
exports.stateDiffSchema = {
    $id: '/state/diff',
    type: 'object',
    required: ['updated', 'created'],
    properties: {
        updated: {
            type: 'array',
            fieldNumber: 1,
            items: {
                type: 'object',
                required: ['key', 'value'],
                properties: {
                    key: {
                        dataType: 'bytes',
                        fieldNumber: 1,
                    },
                    value: {
                        dataType: 'bytes',
                        fieldNumber: 2,
                    },
                },
            },
        },
        created: {
            type: 'array',
            fieldNumber: 2,
            items: {
                dataType: 'bytes',
            },
        },
        deleted: {
            type: 'array',
            fieldNumber: 3,
            items: {
                type: 'object',
                required: ['key', 'value'],
                properties: {
                    key: {
                        dataType: 'bytes',
                        fieldNumber: 1,
                    },
                    value: {
                        dataType: 'bytes',
                        fieldNumber: 2,
                    },
                },
            },
        },
    },
};
exports.eventSchema = {
    $id: '/block/event',
    type: 'object',
    required: ['module', 'name', 'data', 'topics', 'height', 'index'],
    properties: {
        module: {
            dataType: 'string',
            minLength: constants_1.MIN_MODULE_NAME_LENGTH,
            maxLength: constants_1.MAX_MODULE_NAME_LENGTH,
            fieldNumber: 1,
        },
        name: {
            dataType: 'string',
            minLength: constants_1.MIN_EVENT_NAME_LENGTH,
            maxLength: constants_1.MAX_EVENT_NAME_LENGTH,
            fieldNumber: 2,
        },
        data: {
            dataType: 'bytes',
            fieldNumber: 3,
        },
        topics: {
            type: 'array',
            fieldNumber: 4,
            maxItems: constants_1.EVENT_MAX_TOPICS_PER_EVENT,
            items: {
                dataType: 'bytes',
            },
        },
        height: {
            dataType: 'uint32',
            fieldNumber: 5,
        },
        index: {
            dataType: 'uint32',
            fieldNumber: 6,
            maximum: constants_1.MAX_EVENTS_PER_BLOCK - 1,
        },
    },
};
exports.standardEventDataSchema = {
    $id: '/block/event/standard',
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            dataType: 'boolean',
            fieldNumber: 1,
        },
    },
};
//# sourceMappingURL=schema.js.map