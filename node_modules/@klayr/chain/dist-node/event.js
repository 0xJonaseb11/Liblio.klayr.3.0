"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Event = void 0;
const codec_1 = require("@klayr/codec");
const cryptography_1 = require("@klayr/cryptography");
const constants_1 = require("./constants");
const schema_1 = require("./schema");
class Event {
    constructor({ index, module, name, topics, data, height }) {
        this._index = index;
        this._module = module;
        this._name = name;
        this._topics = topics;
        this._data = data;
        this._height = height;
    }
    static fromBytes(value) {
        const decoded = codec_1.codec.decode(schema_1.eventSchema, value);
        return new Event(decoded);
    }
    id() {
        return cryptography_1.utils.hash(codec_1.codec.encode(schema_1.eventSchema, this.toObject()));
    }
    setIndex(index) {
        this._index = index;
    }
    getBytes() {
        return codec_1.codec.encode(schema_1.eventSchema, this._getAllProps());
    }
    keyPair() {
        const result = [];
        const value = cryptography_1.utils.hash(this.getBytes());
        for (let i = 0; i < this._topics.length; i += 1) {
            const key = Buffer.concat([
                cryptography_1.utils.hash(this._topics[i]).subarray(0, constants_1.EVENT_TOPIC_HASH_LENGTH_BYTES),
                this._getIndexBytes(i),
            ]);
            result.push({
                key,
                value,
            });
        }
        return result;
    }
    toJSON() {
        return codec_1.codec.toJSON(schema_1.eventSchema, this._getAllProps());
    }
    toObject() {
        return this._getAllProps();
    }
    _getIndexBytes(index) {
        const indexBytes = Buffer.alloc(constants_1.EVENT_TOTAL_INDEX_LENGTH_BYTES);
        const indexBit = ((this._index << constants_1.EVENT_TOPIC_INDEX_LENGTH_BITS) >>> 0) + index;
        indexBytes.writeUint32BE(indexBit, 0);
        return indexBytes;
    }
    _getAllProps() {
        return {
            data: this._data,
            index: this._index,
            module: this._module,
            name: this._name,
            topics: this._topics,
            height: this._height,
        };
    }
}
exports.Event = Event;
//# sourceMappingURL=event.js.map