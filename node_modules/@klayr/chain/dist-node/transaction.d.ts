/// <reference types="node" />
import { JSONObject } from './types';
export interface TransactionAttrs {
    readonly module: string;
    readonly command: string;
    readonly senderPublicKey: Buffer;
    readonly nonce: bigint;
    readonly fee: bigint;
    readonly params: Buffer;
    readonly signatures: ReadonlyArray<Buffer>;
    readonly id?: Buffer;
}
export type TransactionJSON = JSONObject<TransactionAttrs> & {
    id: string;
};
export declare const transactionSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        module: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        command: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        nonce: {
            dataType: string;
            fieldNumber: number;
        };
        fee: {
            dataType: string;
            fieldNumber: number;
        };
        senderPublicKey: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        params: {
            dataType: string;
            fieldNumber: number;
        };
        signatures: {
            type: string;
            items: {
                dataType: string;
            };
            fieldNumber: number;
        };
    };
};
export declare class Transaction {
    readonly module: string;
    readonly command: string;
    readonly params: Buffer;
    readonly nonce: bigint;
    readonly fee: bigint;
    readonly senderPublicKey: Buffer;
    readonly signatures: Buffer[];
    private _id?;
    private _senderAddress?;
    constructor(transaction: TransactionAttrs);
    static fromBytes(bytes: Buffer): Transaction;
    static fromJSON(value: TransactionJSON): Transaction;
    get id(): Buffer;
    get senderAddress(): Buffer;
    getBytes(): Buffer;
    getSigningBytes(): Buffer;
    sign(chainID: Buffer, privateKey: Buffer): void;
    validate(): void;
    toJSON(): TransactionJSON;
    toObject(): TransactionAttrs;
    private _getProps;
}
