export declare const applicationConfigSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        system: {
            type: string;
            required: string[];
            properties: {
                version: {
                    type: string;
                    format: string;
                };
                dataPath: {
                    type: string;
                };
                logLevel: {
                    type: string;
                    enum: string[];
                };
                keepEventsForHeights: {
                    type: string;
                };
                keepInclusionProofsForHeights: {
                    type: string;
                };
                inclusionProofKeys: {
                    type: string;
                    items: {
                        type: string;
                    };
                    uniqueItems: boolean;
                };
                backup: {
                    type: string;
                    required: string[];
                    properties: {
                        height: {
                            type: string;
                            minimum: number;
                            description: string;
                        };
                    };
                };
                enableMetrics: {
                    type: string;
                };
            };
        };
        rpc: {
            type: string;
            required: string[];
            properties: {
                modes: {
                    type: string;
                    items: {
                        type: string;
                        enum: string[];
                    };
                    uniqueItems: boolean;
                };
                host: {
                    type: string;
                };
                port: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                allowedMethods: {
                    type: string;
                    items: {
                        type: string;
                    };
                    uniqueItems: boolean;
                };
                accessControlAllowOrigin: {
                    type: string;
                };
            };
        };
        legacy: {
            type: string;
            required: string[];
            properties: {
                sync: {
                    type: string;
                };
                brackets: {
                    type: string;
                    items: {
                        type: string;
                        required: string[];
                        properties: {
                            startHeight: {
                                type: string;
                                minimum: number;
                            };
                            snapshotHeight: {
                                type: string;
                                minimum: number;
                            };
                            snapshotBlockID: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
        network: {
            type: string;
            properties: {
                version: {
                    type: string;
                    format: string;
                };
                port: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                host: {
                    type: string;
                    format: string;
                };
                seedPeers: {
                    type: string;
                    items: {
                        type: string;
                        properties: {
                            ip: {
                                type: string;
                                format: string;
                            };
                            port: {
                                type: string;
                                minimum: number;
                                maximum: number;
                            };
                        };
                    };
                };
                blacklistedIPs: {
                    type: string;
                    items: {
                        type: string;
                        format: string;
                    };
                };
                fixedPeers: {
                    type: string;
                    items: {
                        type: string;
                        properties: {
                            ip: {
                                type: string;
                                format: string;
                            };
                            port: {
                                type: string;
                                minimum: number;
                                maximum: number;
                            };
                        };
                    };
                    maximum: number;
                };
                whitelistedPeers: {
                    type: string;
                    items: {
                        type: string;
                        properties: {
                            ip: {
                                type: string;
                                format: string;
                            };
                            port: {
                                type: string;
                                minimum: number;
                                maximum: number;
                            };
                        };
                    };
                };
                maxOutboundConnections: {
                    type: string;
                };
                maxInboundConnections: {
                    type: string;
                };
                wsMaxPayload: {
                    type: string;
                    maximum: number;
                };
                advertiseAddress: {
                    type: string;
                };
            };
            required: string[];
        };
        transactionPool: {
            type: string;
            properties: {
                maxTransactions: {
                    type: string;
                    minimum: number;
                };
                maxTransactionsPerAccount: {
                    type: string;
                    minimum: number;
                };
                transactionExpiryTime: {
                    type: string;
                    minimum: number;
                };
                minEntranceFeePriority: {
                    type: string;
                    format: string;
                };
                minReplacementFeeDifference: {
                    type: string;
                    format: string;
                };
            };
        };
        genesis: {
            type: string;
            required: string[];
            properties: {
                block: {
                    type: string;
                    oneOf: {
                        required: string[];
                        properties: {
                            fromFile: {
                                type: string;
                            };
                            blob: {
                                type: string;
                                format: string;
                            };
                        };
                    }[];
                };
                blockTime: {
                    type: string;
                    minimum: number;
                    maximum: number;
                    description: string;
                };
                bftBatchSize: {
                    type: string;
                    maximum: number;
                    description: string;
                };
                chainID: {
                    type: string;
                    format: string;
                    description: string;
                };
                maxTransactionsSize: {
                    type: string;
                    minimum: number;
                    maximum: number;
                    description: string;
                };
                minimumCertifyHeight: {
                    type: string;
                    minimum: number;
                    description: string;
                };
            };
            additionalProperties: boolean;
        };
        generator: {
            type: string;
            required: string[];
            properties: {
                keys: {
                    type: string;
                    properties: {
                        fromFile: {
                            type: string;
                            description: string;
                        };
                    };
                };
            };
        };
        modules: {
            type: string;
            propertyNames: {
                pattern: string;
            };
            additionalProperties: {
                type: string;
            };
        };
        plugins: {
            type: string;
        };
    };
    additionalProperties: boolean;
    default: {
        system: {
            dataPath: string;
            version: string;
            keepEventsForHeights: number;
            keepInclusionProofsForHeights: number;
            inclusionProofKeys: never[];
            logLevel: string;
            enableMetrics: boolean;
            backup: {
                height: number;
            };
        };
        rpc: {
            modes: string[];
            port: number;
            host: string;
            allowedMethods: never[];
            accessControlAllowOrigin: string;
        };
        legacy: {
            sync: boolean;
            brackets: never[];
        };
        network: {
            version: string;
            seedPeers: never[];
            port: number;
        };
        transactionPool: {
            maxTransactions: number;
            maxTransactionsPerAccount: number;
            transactionExpiryTime: number;
            minEntranceFeePriority: string;
            minReplacementFeeDifference: string;
        };
        genesis: {
            block: {
                fromFile: string;
            };
            blockTime: number;
            bftBatchSize: number;
            maxTransactionsSize: number;
            minimumCertifyHeight: number;
        };
        generator: {
            keys: {};
        };
        modules: {};
        plugins: {};
    };
};
