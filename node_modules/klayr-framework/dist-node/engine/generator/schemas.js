"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keysFileSchema = exports.getTransactionsFromPoolRequestSchema = exports.hasKeysRequestSchema = exports.setKeysRequestSchema = exports.encryptedMessageSchema = exports.plainGeneratorKeysSchema = exports.generatorKeysSchema = exports.dryRunTransactionRequestSchema = exports.previouslyGeneratedInfoSchema = exports.postTransactionsAnnouncementSchema = exports.getTransactionsResponseSchema = exports.getTransactionRequestSchema = exports.postTransactionRequestSchema = exports.estimateSafeStatusRequestSchema = exports.updateStatusRequestSchema = exports.setStatusRequestSchema = exports.transactionIdsSchema = void 0;
exports.transactionIdsSchema = {
    $id: '/klayr/transactionIds',
    title: 'Broadcast Transactions',
    type: 'object',
    required: ['transactionIds'],
    properties: {
        transactionIds: {
            type: 'array',
            fieldNumber: 1,
            minItems: 1,
            maxItems: 100,
            items: {
                dataType: 'bytes',
            },
        },
    },
};
exports.setStatusRequestSchema = {
    $id: '/klayr/setStatusRequest',
    title: 'Set block generation status',
    type: 'object',
    required: ['address', 'height', 'maxHeightGenerated', 'maxHeightPrevoted'],
    properties: {
        address: {
            type: 'string',
            format: 'klayr32',
        },
        height: {
            type: 'integer',
            minimum: 0,
        },
        maxHeightGenerated: {
            type: 'integer',
            minimum: 0,
        },
        maxHeightPrevoted: {
            type: 'integer',
            minimum: 0,
        },
    },
};
exports.updateStatusRequestSchema = {
    $id: '/klayr/updateStatusRequest',
    title: 'Update block generation status',
    type: 'object',
    required: ['address', 'password', 'enable', 'height', 'maxHeightGenerated', 'maxHeightPrevoted'],
    properties: {
        address: {
            type: 'string',
            format: 'klayr32',
        },
        password: {
            type: 'string',
        },
        enable: {
            type: 'boolean',
        },
        height: {
            type: 'integer',
        },
        maxHeightGenerated: {
            type: 'integer',
        },
        maxHeightPrevoted: {
            type: 'integer',
        },
    },
};
exports.estimateSafeStatusRequestSchema = {
    $id: '/generator/estimateSafeStatusRequest',
    type: 'object',
    required: ['timeShutdown'],
    properties: {
        timeShutdown: {
            type: 'integer',
        },
    },
};
exports.postTransactionRequestSchema = {
    $id: '/klayr/postTransaction',
    title: 'Transactions',
    type: 'object',
    required: ['transaction'],
    properties: {
        transaction: {
            type: 'string',
            format: 'hex',
        },
    },
};
exports.getTransactionRequestSchema = {
    $id: '/klayr/getTransactionRequest',
    title: 'Broadcast Transactions',
    type: 'object',
    required: ['transactionIds'],
    properties: {
        transactionIds: {
            type: 'array',
            fieldNumber: 1,
            minItems: 1,
            maxItems: 100,
            items: {
                dataType: 'bytes',
            },
        },
    },
};
exports.getTransactionsResponseSchema = {
    $id: '/klayr/getTransactionsResponse',
    title: 'Transactions',
    type: 'object',
    required: ['transactions'],
    properties: {
        transactions: {
            type: 'array',
            fieldNumber: 1,
            items: {
                dataType: 'bytes',
            },
        },
    },
};
exports.postTransactionsAnnouncementSchema = {
    $id: '/klayr/postTransactionsAnnouncementSchema',
    title: 'Post Transactions Announcement',
    type: 'object',
    required: ['transactionIds'],
    properties: {
        transactionIds: {
            type: 'array',
            fieldNumber: 1,
            minItems: 1,
            maxItems: 100,
            items: {
                dataType: 'bytes',
            },
        },
    },
};
exports.previouslyGeneratedInfoSchema = {
    title: 'Previously Generated Info',
    $id: '/node/generator/previously_generated_info',
    type: 'object',
    required: ['height', 'maxHeightPrevoted', 'maxHeightGenerated'],
    properties: {
        height: {
            dataType: 'uint32',
            fieldNumber: 1,
        },
        maxHeightPrevoted: {
            dataType: 'uint32',
            fieldNumber: 2,
        },
        maxHeightGenerated: {
            dataType: 'uint32',
            fieldNumber: 3,
        },
    },
};
exports.dryRunTransactionRequestSchema = {
    $id: '/klayr/dryRunTransaction',
    title: 'Transactions',
    type: 'object',
    required: ['transaction'],
    properties: {
        transaction: {
            type: 'string',
            format: 'hex',
        },
        skipVerify: {
            type: 'boolean',
            default: false,
        },
        strict: {
            type: 'boolean',
            default: false,
        },
    },
};
exports.generatorKeysSchema = {
    $id: '/generator/generatorKeysSchema',
    type: 'object',
    required: ['type', 'data'],
    properties: {
        type: {
            dataType: 'string',
            fieldNumber: 1,
        },
        data: {
            dataType: 'bytes',
            fieldNumber: 2,
        },
    },
};
exports.plainGeneratorKeysSchema = {
    $id: '/generator/plainGeneratorKeys',
    type: 'object',
    required: ['generatorKey', 'generatorPrivateKey', 'blsKey', 'blsPrivateKey'],
    properties: {
        generatorKey: {
            dataType: 'bytes',
            fieldNumber: 1,
        },
        generatorPrivateKey: {
            dataType: 'bytes',
            fieldNumber: 2,
        },
        blsKey: {
            dataType: 'bytes',
            fieldNumber: 3,
        },
        blsPrivateKey: {
            dataType: 'bytes',
            fieldNumber: 4,
        },
    },
};
exports.encryptedMessageSchema = {
    $id: '/generator/encryptedMessage',
    type: 'object',
    required: ['version', 'ciphertext', 'kdf', 'kdfparams', 'cipher', 'cipherparams'],
    properties: {
        version: {
            dataType: 'string',
            fieldNumber: 1,
        },
        ciphertext: {
            dataType: 'string',
            fieldNumber: 2,
        },
        kdf: {
            dataType: 'string',
            fieldNumber: 3,
        },
        kdfparams: {
            type: 'object',
            fieldNumber: 4,
            required: ['parallelism', 'iterations', 'memorySize', 'salt'],
            properties: {
                parallelism: {
                    dataType: 'uint32',
                    fieldNumber: 1,
                },
                iterations: {
                    dataType: 'uint32',
                    fieldNumber: 2,
                },
                memorySize: {
                    dataType: 'uint32',
                    fieldNumber: 3,
                },
                salt: {
                    dataType: 'string',
                    fieldNumber: 4,
                },
            },
        },
        cipher: {
            dataType: 'string',
            fieldNumber: 5,
        },
        cipherparams: {
            type: 'object',
            fieldNumber: 6,
            required: ['iv', 'tag'],
            properties: {
                iv: {
                    dataType: 'string',
                    fieldNumber: 1,
                },
                tag: {
                    dataType: 'string',
                    fieldNumber: 2,
                },
            },
        },
    },
};
const encryptedObjectSchema = {
    type: 'object',
    required: ['version', 'ciphertext', 'kdf', 'kdfparams', 'cipher', 'cipherparams'],
    properties: {
        version: {
            type: 'string',
        },
        ciphertext: {
            type: 'string',
            format: 'hex',
        },
        kdf: {
            type: 'string',
            enum: ['argon2id', 'PBKDF2'],
        },
        kdfparams: {
            type: 'object',
            properties: {
                parallelism: {
                    type: 'integer',
                },
                iterations: {
                    type: 'integer',
                },
                memoriSize: {
                    type: 'integer',
                },
                salt: {
                    type: 'string',
                    format: 'hex',
                },
            },
        },
        cipher: {
            type: 'string',
            enum: ['aes-128-gcm'],
        },
        cipherparams: {
            type: 'object',
            properties: {
                iv: {
                    type: 'string',
                    format: 'hex',
                },
                tag: {
                    type: 'string',
                    format: 'hex',
                },
            },
        },
    },
};
const plainKeysObjectSchema = {
    type: 'object',
    required: ['generatorKey', 'generatorPrivateKey', 'blsKey', 'blsPrivateKey'],
    properties: {
        generatorKey: {
            type: 'string',
            format: 'hex',
            minLength: 64,
            maxLength: 64,
        },
        generatorPrivateKey: {
            type: 'string',
            format: 'hex',
            minLength: 128,
            maxLength: 128,
        },
        blsKey: {
            type: 'string',
            format: 'hex',
            minLength: 96,
            maxLength: 96,
        },
        blsPrivateKey: {
            type: 'string',
            format: 'hex',
            minLength: 64,
            maxLength: 64,
        },
    },
};
exports.setKeysRequestSchema = {
    $id: '/generator/setKeysRequest',
    type: 'object',
    required: ['address', 'type', 'data'],
    properties: {
        address: {
            type: 'string',
            format: 'klayr32',
        },
    },
    oneOf: [
        {
            type: 'object',
            properties: {
                type: {
                    const: 'plain',
                },
                data: plainKeysObjectSchema,
            },
        },
        {
            type: 'object',
            properties: {
                type: {
                    const: 'encrypted',
                },
                data: encryptedObjectSchema,
            },
        },
    ],
};
exports.hasKeysRequestSchema = {
    $id: '/generator/hasKeysRequest',
    type: 'object',
    required: ['address'],
    properties: {
        address: {
            type: 'string',
            format: 'klayr32',
        },
    },
};
exports.getTransactionsFromPoolRequestSchema = {
    $id: '/generator/getTransactionsFromPool',
    type: 'object',
    properties: {
        address: {
            type: 'string',
            format: 'klayr32',
        },
    },
};
exports.keysFileSchema = {
    $id: '/generator/keysFile',
    type: 'object',
    required: ['keys'],
    properties: {
        keys: {
            type: 'array',
            items: {
                type: 'object',
                required: ['address'],
                properties: {
                    address: {
                        type: 'string',
                        format: 'klayr32',
                    },
                    plain: plainKeysObjectSchema,
                    encrypted: {
                        ...encryptedObjectSchema,
                        required: [],
                    },
                },
            },
        },
    },
};
//# sourceMappingURL=schemas.js.map