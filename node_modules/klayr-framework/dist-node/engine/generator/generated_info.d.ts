/// <reference types="node" />
import { GeneratorStore } from './generator_store';
import { GeneratedInfo } from './schemas';
import { GeneratorKeys } from './types';
export declare const getGeneratedInfo: (store: GeneratorStore) => Promise<{
    height: number;
    maxHeightPrevoted: number;
    maxHeightGenerated: number;
    address: Buffer;
}[]>;
export declare const setLastGeneratedInfo: (store: GeneratorStore, generatorAddress: Buffer, header: GeneratedInfo) => Promise<void>;
export declare const getLastGeneratedInfo: (store: GeneratorStore, generatorAddress: Buffer) => Promise<GeneratedInfo>;
export declare const getOrDefaultLastGeneratedInfo: (store: GeneratorStore, generatorAddress: Buffer) => Promise<GeneratedInfo>;
export declare const isZeroValueGeneratedInfo: (info: GeneratedInfo) => boolean;
export declare const isEqualGeneratedInfo: (g1: GeneratedInfo, g2: GeneratedInfo) => boolean;
export declare const getAllGeneratorKeys: (store: GeneratorStore) => Promise<GeneratorKeys[]>;
export declare const getGeneratorKeys: (store: GeneratorStore, address: Buffer) => Promise<GeneratorKeys>;
export declare const setGeneratorKey: (store: GeneratorStore, address: Buffer, keys: GeneratorKeys) => Promise<void>;
export declare const generatorKeysExist: (store: GeneratorStore, address: Buffer) => Promise<boolean>;
