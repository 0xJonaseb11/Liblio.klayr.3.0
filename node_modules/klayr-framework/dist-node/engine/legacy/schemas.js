"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLegacyBlocksFromIdRequestSchema = exports.legacyChainBracketInfoSchema = exports.transactionSchemaV2 = exports.blockHeaderSchemaV2 = exports.blockSchemaV2 = void 0;
exports.blockSchemaV2 = {
    $id: '/block/v2',
    type: 'object',
    properties: {
        header: {
            dataType: 'bytes',
            fieldNumber: 1,
        },
        payload: {
            type: 'array',
            items: {
                dataType: 'bytes',
            },
            fieldNumber: 2,
        },
    },
    required: ['header', 'payload'],
};
const HASH_LENGTH = 32;
const PUBLIC_KEY_LENGTH = 32;
const SIGNATURE_LENGTH = 64;
exports.blockHeaderSchemaV2 = {
    $id: '/block/v2/header/',
    type: 'object',
    properties: {
        version: { dataType: 'uint32', fieldNumber: 1 },
        timestamp: { dataType: 'uint32', fieldNumber: 2 },
        height: { dataType: 'uint32', fieldNumber: 3 },
        previousBlockID: {
            dataType: 'bytes',
            fieldNumber: 4,
            minLength: HASH_LENGTH,
            maxLength: HASH_LENGTH,
        },
        transactionRoot: {
            dataType: 'bytes',
            fieldNumber: 5,
            minLength: HASH_LENGTH,
            maxLength: HASH_LENGTH,
        },
        generatorPublicKey: {
            dataType: 'bytes',
            fieldNumber: 6,
            minLength: PUBLIC_KEY_LENGTH,
            maxLength: PUBLIC_KEY_LENGTH,
        },
        reward: { dataType: 'uint64', fieldNumber: 7 },
        asset: { dataType: 'bytes', fieldNumber: 8 },
        signature: {
            dataType: 'bytes',
            fieldNumber: 9,
            minLength: SIGNATURE_LENGTH,
            maxLength: SIGNATURE_LENGTH,
        },
    },
    required: [
        'version',
        'timestamp',
        'height',
        'previousBlockID',
        'transactionRoot',
        'generatorPublicKey',
        'reward',
        'asset',
    ],
};
exports.transactionSchemaV2 = {
    $id: '/block/v2/transaction',
    type: 'object',
    required: ['moduleID', 'assetID', 'nonce', 'fee', 'senderPublicKey', 'asset'],
    properties: {
        moduleID: {
            dataType: 'uint32',
            fieldNumber: 1,
            minimum: 2,
        },
        assetID: {
            dataType: 'uint32',
            fieldNumber: 2,
        },
        nonce: {
            dataType: 'uint64',
            fieldNumber: 3,
        },
        fee: {
            dataType: 'uint64',
            fieldNumber: 4,
        },
        senderPublicKey: {
            dataType: 'bytes',
            fieldNumber: 5,
            minLength: 32,
            maxLength: 32,
        },
        asset: {
            dataType: 'bytes',
            fieldNumber: 6,
        },
        signatures: {
            type: 'array',
            items: {
                dataType: 'bytes',
            },
            fieldNumber: 7,
        },
    },
};
exports.legacyChainBracketInfoSchema = {
    $id: '/legacy/legacyChainBracketInfo',
    type: 'object',
    properties: {
        startHeight: { dataType: 'uint32', fieldNumber: 1 },
        snapshotBlockHeight: { dataType: 'uint32', fieldNumber: 2 },
        lastBlockHeight: { dataType: 'uint32', fieldNumber: 3 },
    },
    required: ['startHeight', 'snapshotBlockHeight', 'lastBlockHeight'],
};
exports.getLegacyBlocksFromIdRequestSchema = {
    $id: '/legacy/getBlocksFromIdRequest',
    title: 'Get Blocks From Id Request',
    type: 'object',
    required: ['blockID', 'snapshotBlockID'],
    properties: {
        blockID: {
            fieldNumber: 1,
            dataType: 'bytes',
            minLength: 32,
            maxLength: 32,
        },
        snapshotBlockID: {
            fieldNumber: 2,
            dataType: 'bytes',
            minLength: 32,
            maxLength: 32,
        },
    },
};
//# sourceMappingURL=schemas.js.map