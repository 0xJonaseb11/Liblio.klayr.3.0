"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyNetworkEndpoint = void 0;
const lisk_db_1 = require("@liskhq/lisk-db");
const codec_1 = require("@klayr/codec");
const validator_1 = require("@klayr/validator");
const base_network_endpoint_1 = require("../network/base_network_endpoint");
const constants_1 = require("../consensus/constants");
const schema_1 = require("../consensus/schema");
const storage_1 = require("./storage");
const codec_2 = require("./codec");
const schemas_1 = require("./schemas");
const LEGACY_BLOCKS_FROM_IDS_RATE_LIMIT_FREQUENCY = 100;
class LegacyNetworkEndpoint extends base_network_endpoint_1.BaseNetworkEndpoint {
    constructor(args) {
        super(args.network);
        this._logger = args.logger;
        this._network = args.network;
        this._storage = new storage_1.Storage(args.db);
    }
    async handleRPCGetLegacyBlocksFromID(data, peerId) {
        this.addRateLimit(constants_1.NETWORK_LEGACY_GET_BLOCKS_FROM_ID, peerId, LEGACY_BLOCKS_FROM_IDS_RATE_LIMIT_FREQUENCY);
        let rpcBlocksByIdData;
        try {
            rpcBlocksByIdData = codec_1.codec.decode(schemas_1.getLegacyBlocksFromIdRequestSchema, data);
        }
        catch (error) {
            this._logger.warn({
                err: error,
                req: data,
                peerId,
            }, `${constants_1.NETWORK_LEGACY_GET_BLOCKS_FROM_ID} response failed on decoding. Applying a penalty to the peer`);
            this._network.applyPenaltyOnPeer({
                peerId,
                penalty: 100,
            });
            throw error;
        }
        try {
            validator_1.validator.validate(schemas_1.getLegacyBlocksFromIdRequestSchema, rpcBlocksByIdData);
        }
        catch (error) {
            this._logger.warn({
                err: error,
                req: data,
                peerId,
            }, `${constants_1.NETWORK_LEGACY_GET_BLOCKS_FROM_ID} response failed on validation. Applying a penalty to the peer`);
            this._network.applyPenaltyOnPeer({
                peerId,
                penalty: 100,
            });
            throw error;
        }
        const { blockID: lastBlockID, snapshotBlockID } = rpcBlocksByIdData;
        let bracketInfo;
        try {
            bracketInfo = await this._storage.getBracketInfo(snapshotBlockID);
        }
        catch (error) {
            if (!(error instanceof lisk_db_1.NotFoundError)) {
                throw error;
            }
            this._logger.warn({ peerId }, `Received invalid snapshotBlockID: Applying a penalty to the peer`);
            this._network.applyPenaltyOnPeer({ peerId, penalty: 100 });
            throw error;
        }
        let fromBlockHeight;
        try {
            if (snapshotBlockID.equals(lastBlockID)) {
                fromBlockHeight = bracketInfo.snapshotBlockHeight;
            }
            else {
                const { block: { header: { height }, }, } = (0, codec_2.decodeBlock)(await this._storage.getBlockByID(lastBlockID));
                fromBlockHeight = height;
            }
        }
        catch (errors) {
            return codec_1.codec.encode(schema_1.getBlocksFromIdResponseSchema, { blocks: [] });
        }
        const lastBlockHeight = fromBlockHeight - 1;
        const fetchFromHeight = bracketInfo.startHeight >= lastBlockHeight - 99
            ? bracketInfo.startHeight
            : lastBlockHeight - 100;
        this._logger.debug({ peerId, engineModule: 'legacy' }, `Responding to "${constants_1.NETWORK_LEGACY_GET_BLOCKS_FROM_ID}" with blocks from height ${fetchFromHeight} to ${lastBlockHeight}`);
        const encodedBlocks = await this._storage.getBlocksByHeightBetween(fetchFromHeight, lastBlockHeight);
        return codec_1.codec.encode(schema_1.getBlocksFromIdResponseSchema, { blocks: encodedBlocks });
    }
}
exports.LegacyNetworkEndpoint = LegacyNetworkEndpoint;
//# sourceMappingURL=network_endpoint.js.map