import { BaseCCCommand } from '../../interoperability/base_cc_command';
import { CrossChainMessageContext } from '../../interoperability/types';
import { TokenMethod } from '../method';
import { InternalMethod } from '../internal_method';
export declare class CrossChainTransferCommand extends BaseCCCommand {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            tokenID: {
                dataType: string;
                fieldNumber: number;
                minLength: number;
                maxLength: number;
            };
            amount: {
                dataType: string;
                fieldNumber: number;
            };
            senderAddress: {
                dataType: string;
                fieldNumber: number;
                format: string;
            };
            recipientAddress: {
                dataType: string;
                fieldNumber: number;
                format: string;
            };
            data: {
                dataType: string;
                fieldNumber: number;
                minLength: number;
                maxLength: number;
            };
        };
    };
    private _tokenMethod;
    private _internalMethod;
    get name(): string;
    init(args: {
        tokenMethod: TokenMethod;
        internalMethod: InternalMethod;
    }): void;
    verify(ctx: CrossChainMessageContext): Promise<void>;
    execute(ctx: CrossChainMessageContext): Promise<void>;
}
