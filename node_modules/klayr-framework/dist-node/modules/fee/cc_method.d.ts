import { BaseCCMethod } from '../interoperability/base_cc_method';
import { CrossChainMessageContext } from '../interoperability/types';
import { InteroperabilityMethod, ModuleConfig, TokenMethod } from './types';
import { NamedRegistry } from '../named_registry';
export declare class FeeInteroperableMethod extends BaseCCMethod {
    private readonly _moduleName;
    private _interopMethod;
    private _tokenMethod;
    private _feePoolAddress?;
    constructor(stores: NamedRegistry, events: NamedRegistry, moduleName: string);
    init(config: ModuleConfig): void;
    addDependencies(interoperabilityMethod: InteroperabilityMethod, tokenMethod: TokenMethod): void;
    beforeCrossChainCommandExecute(ctx: CrossChainMessageContext): Promise<void>;
    afterCrossChainCommandExecute(ctx: CrossChainMessageContext): Promise<void>;
}
