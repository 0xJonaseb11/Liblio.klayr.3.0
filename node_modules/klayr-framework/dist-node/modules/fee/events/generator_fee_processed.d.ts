/// <reference types="node" />
import { BaseEvent, EventQueuer } from '../../base_event';
export interface GeneratorFeeProcessedData {
    senderAddress: Buffer;
    generatorAddress: Buffer;
    burntAmount: bigint;
    generatorAmount: bigint;
}
export declare const generatorFeeProcessedSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        senderAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        generatorAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        burntAmount: {
            dataType: string;
            fieldNumber: number;
        };
        generatorAmount: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare class GeneratorFeeProcessedEvent extends BaseEvent<GeneratorFeeProcessedData> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            senderAddress: {
                dataType: string;
                format: string;
                fieldNumber: number;
            };
            generatorAddress: {
                dataType: string;
                format: string;
                fieldNumber: number;
            };
            burntAmount: {
                dataType: string;
                fieldNumber: number;
            };
            generatorAmount: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    log(ctx: EventQueuer, data: GeneratorFeeProcessedData): void;
}
