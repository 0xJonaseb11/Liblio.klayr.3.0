import { GenesisBlockExecuteContext } from '../../state_machine';
import { ModuleInitArgs, ModuleMetadata } from '../base_module';
import { BaseInteroperableModule } from '../interoperability';
import { InteroperabilityMethod, FeeMethod, TokenMethod } from './types';
import { NFTInteroperableMethod } from './cc_method';
import { NFTEndpoint } from './endpoint';
import { NFTMethod } from './method';
import { CrossChainTransferCommand as CrossChainTransferMessageCommand } from './cc_commands/cc_transfer';
import { TransferCrossChainCommand } from './commands/transfer_cross_chain';
import { TransferCommand } from './commands/transfer';
export declare class NFTModule extends BaseInteroperableModule {
    method: NFTMethod;
    endpoint: NFTEndpoint;
    crossChainMethod: NFTInteroperableMethod;
    crossChainTransferCommand: CrossChainTransferMessageCommand;
    crossChainCommand: CrossChainTransferMessageCommand[];
    private readonly _transferCommand;
    private readonly _ccTransferCommand;
    private readonly _internalMethod;
    private _interoperabilityMethod;
    private _feeMethod;
    private _tokenMethod;
    commands: (TransferCrossChainCommand | TransferCommand)[];
    constructor();
    get name(): string;
    addDependencies(interoperabilityMethod: InteroperabilityMethod, feeMethod: FeeMethod, tokenMethod: TokenMethod): void;
    metadata(): ModuleMetadata;
    init(args: ModuleInitArgs): Promise<void>;
    initGenesisState(context: GenesisBlockExecuteContext): Promise<void>;
}
