/// <reference types="node" />
import { BaseEvent, EventQueuer } from '../../base_event';
import { NftEventResult, NftErrorEventResult } from '../constants';
export interface TransferCrossChainEventData {
    senderAddress: Buffer;
    recipientAddress: Buffer;
    receivingChainID: Buffer;
    nftID: Buffer;
    includeAttributes: boolean;
}
export declare const transferCrossChainEventSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        senderAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        recipientAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        nftID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        receivingChainID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        includeAttributes: {
            dataType: string;
            fieldNumber: number;
        };
        result: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare class TransferCrossChainEvent extends BaseEvent<TransferCrossChainEventData & {
    result: NftEventResult;
}> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            senderAddress: {
                dataType: string;
                format: string;
                fieldNumber: number;
            };
            recipientAddress: {
                dataType: string;
                format: string;
                fieldNumber: number;
            };
            nftID: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            receivingChainID: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            includeAttributes: {
                dataType: string;
                fieldNumber: number;
            };
            result: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    log(ctx: EventQueuer, data: TransferCrossChainEventData): void;
    error(ctx: EventQueuer, data: TransferCrossChainEventData, result: NftErrorEventResult): void;
}
