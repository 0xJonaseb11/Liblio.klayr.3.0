/// <reference types="node" />
import { BaseStore, ImmutableStoreGetter, StoreGetter } from '../../base_store';
export interface SupportedNFTsStoreData {
    supportedCollectionIDArray: {
        collectionID: Buffer;
    }[];
}
export declare const supportedNFTsStoreSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        supportedCollectionIDArray: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    collectionID: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                };
            };
        };
    };
};
export declare class SupportedNFTsStore extends BaseStore<SupportedNFTsStoreData> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            supportedCollectionIDArray: {
                type: string;
                fieldNumber: number;
                items: {
                    type: string;
                    required: string[];
                    properties: {
                        collectionID: {
                            dataType: string;
                            minLength: number;
                            maxLength: number;
                            fieldNumber: number;
                        };
                    };
                };
            };
        };
    };
    save(context: StoreGetter, chainID: Buffer, data: SupportedNFTsStoreData): Promise<void>;
    getAll(context: ImmutableStoreGetter): Promise<{
        key: Buffer;
        value: SupportedNFTsStoreData;
    }[]>;
}
