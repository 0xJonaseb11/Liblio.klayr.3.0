"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupportedNFTsStore = exports.supportedNFTsStoreSchema = void 0;
const base_store_1 = require("../../base_store");
const constants_1 = require("../constants");
exports.supportedNFTsStoreSchema = {
    $id: '/nft/store/supportedNFTs',
    type: 'object',
    required: ['supportedCollectionIDArray'],
    properties: {
        supportedCollectionIDArray: {
            type: 'array',
            fieldNumber: 1,
            items: {
                type: 'object',
                required: ['collectionID'],
                properties: {
                    collectionID: {
                        dataType: 'bytes',
                        minLength: constants_1.LENGTH_COLLECTION_ID,
                        maxLength: constants_1.LENGTH_COLLECTION_ID,
                        fieldNumber: 1,
                    },
                },
            },
        },
    },
};
class SupportedNFTsStore extends base_store_1.BaseStore {
    constructor() {
        super(...arguments);
        this.schema = exports.supportedNFTsStoreSchema;
    }
    async save(context, chainID, data) {
        const supportedCollectionIDArray = data.supportedCollectionIDArray.sort((a, b) => a.collectionID.compare(b.collectionID));
        await this.set(context, chainID, { supportedCollectionIDArray });
    }
    async getAll(context) {
        return this.iterate(context, {
            gte: Buffer.alloc(constants_1.LENGTH_CHAIN_ID, 0),
            lte: Buffer.alloc(constants_1.LENGTH_CHAIN_ID, 255),
        });
    }
}
exports.SupportedNFTsStore = SupportedNFTsStore;
//# sourceMappingURL=supported_nfts.js.map