"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.genesisNFTStoreSchema = exports.isNFTSupportedResponseSchema = exports.isNFTSupportedRequestSchema = exports.getEscrowedNFTIDsResponseSchema = exports.getEscrowedNFTIDsRequestSchema = exports.isCollectionIDSupportedResponseSchema = exports.isCollectionIDSupportedRequestSchema = exports.getSupportedCollectionIDsResponseSchema = exports.getNFTResponseSchema = exports.getNFTRequestSchema = exports.hasNFTResponseSchema = exports.hasNFTRequestSchema = exports.getNFTsResponseSchema = exports.getNFTsRequestSchema = exports.crossChainTransferParamsSchema = exports.crossChainNFTTransferMessageParamsSchema = exports.transferParamsSchema = void 0;
const constants_1 = require("./constants");
exports.transferParamsSchema = {
    $id: '/klayr/nftTransferParams',
    type: 'object',
    required: ['nftID', 'recipientAddress', 'data'],
    properties: {
        nftID: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_NFT_ID,
            maxLength: constants_1.LENGTH_NFT_ID,
            fieldNumber: 1,
        },
        recipientAddress: {
            dataType: 'bytes',
            format: 'klayr32',
            fieldNumber: 2,
        },
        data: {
            dataType: 'string',
            minLength: 0,
            maxLength: constants_1.MAX_LENGTH_DATA,
            fieldNumber: 3,
        },
    },
};
exports.crossChainNFTTransferMessageParamsSchema = {
    $id: '/klayr/crossChainNFTTransferMessageParamsSchmema',
    type: 'object',
    required: ['nftID', 'senderAddress', 'recipientAddress', 'attributesArray', 'data'],
    properties: {
        nftID: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_NFT_ID,
            maxLength: constants_1.LENGTH_NFT_ID,
            fieldNumber: 1,
        },
        senderAddress: {
            dataType: 'bytes',
            format: 'klayr32',
            fieldNumber: 2,
        },
        recipientAddress: {
            dataType: 'bytes',
            format: 'klayr32',
            fieldNumber: 3,
        },
        attributesArray: {
            type: 'array',
            fieldNumber: 4,
            items: {
                type: 'object',
                required: ['module', 'attributes'],
                properties: {
                    module: {
                        dataType: 'string',
                        minLength: constants_1.MIN_LENGTH_MODULE_NAME,
                        maxLength: constants_1.MAX_LENGTH_MODULE_NAME,
                        pattern: '^[a-zA-Z0-9]*$',
                        fieldNumber: 1,
                    },
                    attributes: {
                        dataType: 'bytes',
                        fieldNumber: 2,
                    },
                },
            },
        },
        data: {
            dataType: 'string',
            maxLength: constants_1.MAX_LENGTH_DATA,
            fieldNumber: 5,
        },
    },
};
exports.crossChainTransferParamsSchema = {
    $id: '/klayr/crossChainNFTTransferParamsSchema',
    type: 'object',
    required: [
        'nftID',
        'receivingChainID',
        'recipientAddress',
        'data',
        'messageFee',
        'includeAttributes',
    ],
    properties: {
        nftID: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_NFT_ID,
            maxLength: constants_1.LENGTH_NFT_ID,
            fieldNumber: 1,
        },
        receivingChainID: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_CHAIN_ID,
            maxLength: constants_1.LENGTH_CHAIN_ID,
            fieldNumber: 2,
        },
        recipientAddress: {
            dataType: 'bytes',
            format: 'klayr32',
            fieldNumber: 3,
        },
        data: {
            dataType: 'string',
            minLength: 0,
            maxLength: constants_1.MAX_LENGTH_DATA,
            fieldNumber: 4,
        },
        messageFee: {
            dataType: 'uint64',
            fieldNumber: 5,
        },
        includeAttributes: {
            dataType: 'boolean',
            fieldNumber: 6,
        },
    },
};
exports.getNFTsRequestSchema = {
    $id: '/nft/endpoint/getNFTsRequest',
    type: 'object',
    properties: {
        address: {
            type: 'string',
            format: 'klayr32',
        },
    },
    required: ['address'],
};
exports.getNFTsResponseSchema = {
    $id: '/nft/endpoint/getNFTsResponse',
    type: 'object',
    properties: {
        nfts: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'hex',
                    },
                    attributesArray: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                module: {
                                    type: 'string',
                                },
                                attributes: {
                                    type: 'string',
                                    format: 'hex',
                                },
                            },
                        },
                    },
                    lockingModule: {
                        type: 'string',
                    },
                },
            },
        },
    },
};
exports.hasNFTRequestSchema = {
    $id: '/nft/endpoint/hasNFTRequest',
    type: 'object',
    properties: {
        address: {
            type: 'string',
            format: 'klayr32',
        },
        id: {
            type: 'string',
            format: 'hex',
            minLength: constants_1.LENGTH_NFT_ID * 2,
            maxLength: constants_1.LENGTH_NFT_ID * 2,
        },
    },
    required: ['address', 'id'],
};
exports.hasNFTResponseSchema = {
    $id: '/nft/endpoint/hasNFTResponse',
    type: 'object',
    properties: {
        hasNFT: {
            type: 'boolean',
        },
    },
};
exports.getNFTRequestSchema = {
    $id: '/nft/endpoint/getNFTRequest',
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'hex',
            minLength: constants_1.LENGTH_NFT_ID * 2,
            maxLength: constants_1.LENGTH_NFT_ID * 2,
        },
    },
    required: ['id'],
};
exports.getNFTResponseSchema = {
    $id: '/nft/endpoint/getNFTResponse',
    type: 'object',
    properties: {
        owner: {
            type: 'string',
            format: 'hex',
        },
        attributesArray: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    module: {
                        type: 'string',
                    },
                    attributes: {
                        type: 'string',
                        format: 'hex',
                    },
                },
            },
        },
        lockingModule: {
            type: 'string',
        },
    },
};
exports.getSupportedCollectionIDsResponseSchema = {
    $id: '/nft/endpoint/getSupportedCollectionIDsRespone',
    type: 'object',
    properties: {
        supportedCollectionIDs: {
            type: 'array',
            items: {
                type: 'string',
                format: 'hex',
            },
        },
    },
};
exports.isCollectionIDSupportedRequestSchema = {
    $id: '/nft/endpoint/isCollectionIDSupportedRequest',
    type: 'object',
    properties: {
        chainID: {
            type: 'string',
            format: 'hex',
            minLength: constants_1.LENGTH_CHAIN_ID * 2,
            maxLength: constants_1.LENGTH_CHAIN_ID * 2,
        },
        collectionID: {
            type: 'string',
            format: 'hex',
            minLength: constants_1.LENGTH_COLLECTION_ID * 2,
            maxLength: constants_1.LENGTH_COLLECTION_ID * 2,
        },
    },
    required: ['chainID', 'collectionID'],
};
exports.isCollectionIDSupportedResponseSchema = {
    $id: '/nft/endpoint/isCollectionIDSupportedResponse',
    type: 'object',
    properties: {
        isCollectionIDSupported: {
            type: 'boolean',
        },
    },
};
exports.getEscrowedNFTIDsRequestSchema = {
    $id: '/nft/endpoint/getEscrowedNFTIDsRequest',
    type: 'object',
    properties: {
        chainID: {
            type: 'string',
            format: 'hex',
            minLength: constants_1.LENGTH_CHAIN_ID * 2,
            maxLength: constants_1.LENGTH_CHAIN_ID * 2,
        },
    },
    required: ['chainID'],
};
exports.getEscrowedNFTIDsResponseSchema = {
    $id: '/nft/endpoint/getEscrowedNFTIDsResponse',
    type: 'object',
    properties: {
        escrowedNFTIDs: {
            type: 'array',
            items: {
                type: 'string',
                format: 'hex',
            },
        },
    },
};
exports.isNFTSupportedRequestSchema = {
    $id: '/nft/endpoint/isNFTSupportedRequest',
    type: 'object',
    properties: {
        nftID: {
            type: 'string',
            format: 'hex',
            minLength: constants_1.LENGTH_NFT_ID * 2,
            maxLength: constants_1.LENGTH_NFT_ID * 2,
        },
    },
    required: ['nftID'],
};
exports.isNFTSupportedResponseSchema = {
    $id: '/nft/endpoint/isNFTSupportedResponse',
    type: 'object',
    properties: {
        isNFTSupported: {
            type: 'boolean',
        },
    },
};
exports.genesisNFTStoreSchema = {
    $id: '/nft/module/genesis',
    type: 'object',
    required: ['nftSubstore', 'supportedNFTsSubstore'],
    properties: {
        nftSubstore: {
            type: 'array',
            fieldNumber: 1,
            items: {
                type: 'object',
                required: ['nftID', 'owner', 'attributesArray'],
                properties: {
                    nftID: {
                        dataType: 'bytes',
                        minLength: constants_1.LENGTH_NFT_ID,
                        maxLength: constants_1.LENGTH_NFT_ID,
                        fieldNumber: 1,
                    },
                    owner: {
                        dataType: 'bytes',
                        fieldNumber: 2,
                    },
                    attributesArray: {
                        type: 'array',
                        fieldNumber: 3,
                        items: {
                            type: 'object',
                            required: ['module', 'attributes'],
                            properties: {
                                module: {
                                    dataType: 'string',
                                    minLength: constants_1.MIN_LENGTH_MODULE_NAME,
                                    maxLength: constants_1.MAX_LENGTH_MODULE_NAME,
                                    pattern: '^[a-zA-Z0-9]*$',
                                    fieldNumber: 1,
                                },
                                attributes: {
                                    dataType: 'bytes',
                                    fieldNumber: 2,
                                },
                            },
                        },
                    },
                },
            },
        },
        supportedNFTsSubstore: {
            type: 'array',
            fieldNumber: 2,
            items: {
                type: 'object',
                required: ['chainID', 'supportedCollectionIDArray'],
                properties: {
                    chainID: {
                        dataType: 'bytes',
                        fieldNumber: 1,
                    },
                    supportedCollectionIDArray: {
                        type: 'array',
                        fieldNumber: 2,
                        items: {
                            type: 'object',
                            required: ['collectionID'],
                            properties: {
                                collectionID: {
                                    dataType: 'bytes',
                                    minLength: constants_1.LENGTH_COLLECTION_ID,
                                    maxLength: constants_1.LENGTH_COLLECTION_ID,
                                    fieldNumber: 1,
                                },
                            },
                        },
                    },
                },
            },
        },
    },
};
//# sourceMappingURL=schemas.js.map