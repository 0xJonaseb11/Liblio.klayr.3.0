/// <reference types="node" />
export declare const transferParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        nftID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        recipientAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        data: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
    };
};
export declare const crossChainNFTTransferMessageParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        nftID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        senderAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        recipientAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        attributesArray: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        pattern: string;
                        fieldNumber: number;
                    };
                    attributes: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
        data: {
            dataType: string;
            maxLength: number;
            fieldNumber: number;
        };
    };
};
export interface CCTransferMessageParams {
    nftID: Buffer;
    attributesArray: {
        module: string;
        attributes: Buffer;
    }[];
    senderAddress: Buffer;
    recipientAddress: Buffer;
    data: string;
}
export declare const crossChainTransferParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        nftID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        receivingChainID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        recipientAddress: {
            dataType: string;
            format: string;
            fieldNumber: number;
        };
        data: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        messageFee: {
            dataType: string;
            fieldNumber: number;
        };
        includeAttributes: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const getNFTsRequestSchema: {
    $id: string;
    type: string;
    properties: {
        address: {
            type: string;
            format: string;
        };
    };
    required: string[];
};
export declare const getNFTsResponseSchema: {
    $id: string;
    type: string;
    properties: {
        nfts: {
            type: string;
            items: {
                type: string;
                properties: {
                    id: {
                        type: string;
                        format: string;
                    };
                    attributesArray: {
                        type: string;
                        items: {
                            type: string;
                            properties: {
                                module: {
                                    type: string;
                                };
                                attributes: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                    lockingModule: {
                        type: string;
                    };
                };
            };
        };
    };
};
export declare const hasNFTRequestSchema: {
    $id: string;
    type: string;
    properties: {
        address: {
            type: string;
            format: string;
        };
        id: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
    required: string[];
};
export declare const hasNFTResponseSchema: {
    $id: string;
    type: string;
    properties: {
        hasNFT: {
            type: string;
        };
    };
};
export declare const getNFTRequestSchema: {
    $id: string;
    type: string;
    properties: {
        id: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
    required: string[];
};
export declare const getNFTResponseSchema: {
    $id: string;
    type: string;
    properties: {
        owner: {
            type: string;
            format: string;
        };
        attributesArray: {
            type: string;
            items: {
                type: string;
                properties: {
                    module: {
                        type: string;
                    };
                    attributes: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
        lockingModule: {
            type: string;
        };
    };
};
export declare const getSupportedCollectionIDsResponseSchema: {
    $id: string;
    type: string;
    properties: {
        supportedCollectionIDs: {
            type: string;
            items: {
                type: string;
                format: string;
            };
        };
    };
};
export declare const isCollectionIDSupportedRequestSchema: {
    $id: string;
    type: string;
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
        collectionID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
    required: string[];
};
export declare const isCollectionIDSupportedResponseSchema: {
    $id: string;
    type: string;
    properties: {
        isCollectionIDSupported: {
            type: string;
        };
    };
};
export declare const getEscrowedNFTIDsRequestSchema: {
    $id: string;
    type: string;
    properties: {
        chainID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
    required: string[];
};
export declare const getEscrowedNFTIDsResponseSchema: {
    $id: string;
    type: string;
    properties: {
        escrowedNFTIDs: {
            type: string;
            items: {
                type: string;
                format: string;
            };
        };
    };
};
export declare const isNFTSupportedRequestSchema: {
    $id: string;
    type: string;
    properties: {
        nftID: {
            type: string;
            format: string;
            minLength: number;
            maxLength: number;
        };
    };
    required: string[];
};
export declare const isNFTSupportedResponseSchema: {
    $id: string;
    type: string;
    properties: {
        isNFTSupported: {
            type: string;
        };
    };
};
export declare const genesisNFTStoreSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        nftSubstore: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    nftID: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    owner: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    attributesArray: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            type: string;
                            required: string[];
                            properties: {
                                module: {
                                    dataType: string;
                                    minLength: number;
                                    maxLength: number;
                                    pattern: string;
                                    fieldNumber: number;
                                };
                                attributes: {
                                    dataType: string;
                                    fieldNumber: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        supportedNFTsSubstore: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    chainID: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    supportedCollectionIDArray: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            type: string;
                            required: string[];
                            properties: {
                                collectionID: {
                                    dataType: string;
                                    minLength: number;
                                    maxLength: number;
                                    fieldNumber: number;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
