/// <reference types="node" />
import { BaseStore, StoreGetter } from '../../base_store';
import { ChannelData } from '../types';
export declare const channelSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        inbox: {
            type: string;
            fieldNumber: number;
            required: string[];
            properties: {
                appendPath: {
                    type: string;
                    items: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                    };
                    fieldNumber: number;
                };
                size: {
                    dataType: string;
                    fieldNumber: number;
                };
                root: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
            };
        };
        outbox: {
            type: string;
            fieldNumber: number;
            required: string[];
            properties: {
                appendPath: {
                    type: string;
                    items: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                    };
                    fieldNumber: number;
                };
                size: {
                    dataType: string;
                    fieldNumber: number;
                };
                root: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
            };
        };
        partnerChainOutboxRoot: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        messageFeeTokenID: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        minReturnFeePerByte: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare class ChannelDataStore extends BaseStore<ChannelData> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            inbox: {
                type: string;
                fieldNumber: number;
                required: string[];
                properties: {
                    appendPath: {
                        type: string;
                        items: {
                            dataType: string;
                            minLength: number;
                            maxLength: number;
                        };
                        fieldNumber: number;
                    };
                    size: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    root: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                };
            };
            outbox: {
                type: string;
                fieldNumber: number;
                required: string[];
                properties: {
                    appendPath: {
                        type: string;
                        items: {
                            dataType: string;
                            minLength: number;
                            maxLength: number;
                        };
                        fieldNumber: number;
                    };
                    size: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    root: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                };
            };
            partnerChainOutboxRoot: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            messageFeeTokenID: {
                dataType: string;
                minLength: number;
                maxLength: number;
                fieldNumber: number;
            };
            minReturnFeePerByte: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    get storePrefix(): Buffer;
    updatePartnerChainOutboxRoot(context: StoreGetter, chainID: Buffer, messageWitnessHashes: Buffer[]): Promise<void>;
}
