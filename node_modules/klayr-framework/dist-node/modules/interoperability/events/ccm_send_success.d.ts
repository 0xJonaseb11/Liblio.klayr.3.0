/// <reference types="node" />
import { BaseEvent, EventQueuer } from '../../base_event';
import { CCMsg } from '../types';
export interface CcmSendSuccessEventData {
    ccm: CCMsg;
}
export declare const ccmSendSuccessDataSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        ccm: {
            fieldNumber: number;
            type: string;
            required: string[];
            properties: {
                module: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
                crossChainCommand: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
                nonce: {
                    dataType: string;
                    fieldNumber: number;
                };
                fee: {
                    dataType: string;
                    fieldNumber: number;
                };
                sendingChainID: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
                receivingChainID: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                    fieldNumber: number;
                };
                params: {
                    dataType: string;
                    fieldNumber: number;
                };
                status: {
                    dataType: string;
                    fieldNumber: number;
                };
            };
        };
    };
};
export declare class CcmSendSuccessEvent extends BaseEvent<CcmSendSuccessEventData> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            ccm: {
                fieldNumber: number;
                type: string;
                required: string[];
                properties: {
                    module: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    crossChainCommand: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    nonce: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    fee: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    sendingChainID: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    receivingChainID: {
                        dataType: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    params: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    status: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
    };
    log(ctx: EventQueuer, sendingChainID: Buffer, receivingChainID: Buffer, sentCCMID: Buffer, data: CcmSendSuccessEventData, noRevert?: boolean): void;
}
