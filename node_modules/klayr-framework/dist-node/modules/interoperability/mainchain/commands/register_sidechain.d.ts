import { MainchainInteroperabilityInternalMethod } from '../internal_method';
import { BaseInteroperabilityCommand } from '../../base_interoperability_command';
import { FeeMethod, SidechainRegistrationParams } from '../../types';
import { CommandVerifyContext, VerificationResult, CommandExecuteContext } from '../../../../state_machine';
import { TokenMethod } from '../../../token';
export declare class RegisterSidechainCommand extends BaseInteroperabilityCommand<MainchainInteroperabilityInternalMethod> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            chainID: {
                dataType: string;
                fieldNumber: number;
                minLength: number;
                maxLength: number;
            };
            name: {
                dataType: string;
                fieldNumber: number;
                minLength: number;
                maxLength: number;
            };
            sidechainValidators: {
                fieldNumber: number;
                maxItems: number;
                type: string;
                items: {
                    type: string;
                    required: string[];
                    properties: {
                        blsKey: {
                            dataType: string;
                            fieldNumber: number;
                            minLength: number;
                            maxLength: number;
                        };
                        bftWeight: {
                            dataType: string;
                            fieldNumber: number;
                        };
                    };
                };
                minItems: number;
            };
            sidechainCertificateThreshold: {
                dataType: string;
                fieldNumber: number;
            };
        };
    };
    private _feeMethod;
    private _tokenMethod;
    addDependencies(feeMethod: FeeMethod, tokenMethod: TokenMethod): void;
    verify(context: CommandVerifyContext<SidechainRegistrationParams>): Promise<VerificationResult>;
    execute(context: CommandExecuteContext<SidechainRegistrationParams>): Promise<void>;
}
