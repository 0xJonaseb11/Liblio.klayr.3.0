import { BaseCommand } from '../base_command';
import { NamedRegistry } from '../named_registry';
import { BaseCCCommand } from './base_cc_command';
import { BaseCCMethod } from './base_cc_method';
import { BaseInteroperabilityInternalMethod } from './base_interoperability_internal_methods';
export declare abstract class BaseInteroperabilityCommand<T extends BaseInteroperabilityInternalMethod> extends BaseCommand {
    protected readonly interoperableCCMethods: Map<string, BaseCCMethod>;
    protected readonly ccCommands: Map<string, BaseCCCommand<unknown>[]>;
    protected internalMethod: T;
    constructor(stores: NamedRegistry, events: NamedRegistry, interoperableCCMethods: Map<string, BaseCCMethod>, ccCommands: Map<string, BaseCCCommand<unknown>[]>, internalMethod: T);
}
