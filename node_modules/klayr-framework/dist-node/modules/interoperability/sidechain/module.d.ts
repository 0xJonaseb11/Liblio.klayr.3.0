import { ModuleInitArgs, ModuleMetadata } from '../../base_module';
import { BaseInteroperabilityModule } from '../base_interoperability_module';
import { SidechainInteroperabilityMethod } from './method';
import { RegisterMainchainCommand } from './commands/register_mainchain';
import { SidechainInteroperabilityEndpoint } from './endpoint';
import { BaseCCMethod } from '../base_cc_method';
import { ValidatorsMethod } from '../types';
import { SidechainInteroperabilityInternalMethod } from './internal_method';
import { SubmitSidechainCrossChainUpdateCommand } from './commands';
import { InitializeStateRecoveryCommand } from './commands/initialize_state_recovery';
import { RecoverStateCommand } from './commands/recover_state';
import { SidechainCCChannelTerminatedCommand, SidechainCCRegistrationCommand } from './cc_commands';
import { GenesisBlockExecuteContext } from '../../../state_machine';
import { TokenMethod } from '../../token';
export declare class SidechainInteroperabilityModule extends BaseInteroperabilityModule {
    crossChainMethod: BaseCCMethod;
    protected internalMethod: SidechainInteroperabilityInternalMethod;
    method: SidechainInteroperabilityMethod;
    endpoint: SidechainInteroperabilityEndpoint;
    private readonly _mainchainRegistrationCommand;
    private readonly _crossChainUpdateCommand;
    private readonly _stateRecoveryInitCommand;
    private readonly _stateRecoveryCommand;
    commands: (RegisterMainchainCommand | SubmitSidechainCrossChainUpdateCommand | InitializeStateRecoveryCommand | RecoverStateCommand)[];
    crossChainCommand: (SidechainCCChannelTerminatedCommand | SidechainCCRegistrationCommand)[];
    private _validatorsMethod;
    addDependencies(validatorsMethod: ValidatorsMethod, tokenMethod: TokenMethod): void;
    metadata(): ModuleMetadata;
    init(_args: ModuleInitArgs): Promise<void>;
    initGenesisState(ctx: GenesisBlockExecuteContext): Promise<void>;
    private _verifyChainInfos;
    private _verifyTerminatedStateAccounts;
}
