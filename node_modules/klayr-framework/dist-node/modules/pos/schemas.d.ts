export declare const validatorRegistrationCommandParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        name: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        blsKey: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        proofOfPossession: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
        generatorKey: {
            dataType: string;
            minLength: number;
            maxLength: number;
            fieldNumber: number;
        };
    };
};
export declare const updateGeneratorKeyCommandParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        generatorKey: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
    };
};
export declare const stakeCommandParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        stakes: {
            type: string;
            fieldNumber: number;
            minItems: number;
            maxItems: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    validatorAddress: {
                        dataType: string;
                        fieldNumber: number;
                        format: string;
                    };
                    amount: {
                        dataType: string;
                        fieldNumber: number;
                    };
                };
            };
        };
    };
};
export declare const reportMisbehaviorCommandParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        header1: {
            dataType: string;
            fieldNumber: number;
        };
        header2: {
            dataType: string;
            fieldNumber: number;
        };
    };
};
export declare const changeCommissionCommandParamsSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        newCommission: {
            dataType: string;
            fieldNumber: number;
            maximum: number;
        };
    };
};
export declare const configSchema: {
    $id: string;
    type: string;
    properties: {
        factorSelfStakes: {
            type: string;
            format: string;
            minimum: number;
        };
        maxLengthName: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        maxNumberSentStakes: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        maxNumberPendingUnlocks: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        failSafeMissedBlocks: {
            type: string;
            format: string;
            minimum: number;
        };
        failSafeInactiveWindow: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        punishmentWindowSelfStaking: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        minWeightStandby: {
            type: string;
            format: string;
            minimum: number;
        };
        numberActiveValidators: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        numberStandbyValidators: {
            type: string;
            format: string;
            maximum: number;
        };
        posTokenID: {
            type: string;
            format: string;
        };
        validatorRegistrationFee: {
            type: string;
            format: string;
        };
        maxBFTWeightCap: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        commissionIncreasePeriod: {
            type: string;
            format: string;
        };
        maxCommissionIncreaseRate: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        useInvalidBLSKey: {
            type: string;
        };
        baseStakeAmount: {
            type: string;
            format: string;
            minimum: number;
        };
        lockingPeriodStaking: {
            type: string;
            format: string;
        };
        lockingPeriodSelfStaking: {
            type: string;
            format: string;
        };
        reportMisbehaviorReward: {
            type: string;
            format: string;
        };
        reportMisbehaviorLimitBanned: {
            type: string;
            format: string;
            minimum: number;
        };
    };
    required: string[];
};
export declare const genesisStoreSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        validators: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        dataType: string;
                        format: string;
                        fieldNumber: number;
                    };
                    name: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    blsKey: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    proofOfPossession: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    generatorKey: {
                        dataType: string;
                        fieldNumber: number;
                        minLength: number;
                        maxLength: number;
                    };
                    lastGeneratedHeight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    isBanned: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    reportMisbehaviorHeights: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            dataType: string;
                        };
                    };
                    consecutiveMissedBlocks: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    commission: {
                        dataType: string;
                        fieldNumber: number;
                        maximum: number;
                    };
                    lastCommissionIncreaseHeight: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    sharingCoefficients: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            type: string;
                            required: string[];
                            properties: {
                                tokenID: {
                                    dataType: string;
                                    minLength: number;
                                    maxLength: number;
                                    fieldNumber: number;
                                };
                                coefficient: {
                                    dataType: string;
                                    maxLength: number;
                                    fieldNumber: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        stakers: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        dataType: string;
                        format: string;
                        fieldNumber: number;
                    };
                    stakes: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            type: string;
                            required: string[];
                            properties: {
                                validatorAddress: {
                                    dataType: string;
                                    format: string;
                                    fieldNumber: number;
                                };
                                amount: {
                                    dataType: string;
                                    fieldNumber: number;
                                };
                                sharingCoefficients: {
                                    type: string;
                                    fieldNumber: number;
                                    items: {
                                        type: string;
                                        required: string[];
                                        properties: {
                                            tokenID: {
                                                dataType: string;
                                                minLength: number;
                                                maxLength: number;
                                                fieldNumber: number;
                                            };
                                            coefficient: {
                                                dataType: string;
                                                maxLength: number;
                                                fieldNumber: number;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    pendingUnlocks: {
                        type: string;
                        fieldNumber: number;
                        items: {
                            type: string;
                            required: string[];
                            properties: {
                                validatorAddress: {
                                    dataType: string;
                                    fieldNumber: number;
                                    format: string;
                                };
                                amount: {
                                    dataType: string;
                                    fieldNumber: number;
                                };
                                unstakeHeight: {
                                    dataType: string;
                                    fieldNumber: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        genesisData: {
            type: string;
            fieldNumber: number;
            required: string[];
            properties: {
                initRounds: {
                    dataType: string;
                    fieldNumber: number;
                };
                initValidators: {
                    type: string;
                    fieldNumber: number;
                    items: {
                        dataType: string;
                        format: string;
                    };
                };
            };
        };
    };
};
export declare const getValidatorRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            type: string;
            format: string;
        };
    };
};
export declare const getValidatorResponseSchema: {
    type: string;
    required: string[];
    properties: {
        address: {
            type: string;
            format: string;
        };
        name: {
            type: string;
        };
        totalStakeReceived: {
            type: string;
            format: string;
        };
        selfStake: {
            type: string;
            format: string;
        };
        lastGeneratedHeight: {
            type: string;
            format: string;
        };
        isBanned: {
            type: string;
        };
        pomHeights: {
            type: string;
            items: {
                type: string;
                format: string;
            };
        };
        punishmentPeriods: {
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    start: {
                        type: string;
                        format: string;
                    };
                    end: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
        consecutiveMissedBlocks: {
            type: string;
            format: string;
        };
    };
    $id: string;
};
export declare const getConstantsResponseSchema: {
    $id: string;
    type: string;
    properties: {
        defaultCommission: {
            type: string;
            format: string;
        };
        factorSelfStakes: {
            type: string;
            format: string;
            minimum: number;
        };
        maxLengthName: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        maxNumberSentStakes: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        maxNumberPendingUnlocks: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        failSafeMissedBlocks: {
            type: string;
            format: string;
            minimum: number;
        };
        failSafeInactiveWindow: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        punishmentWindowSelfStaking: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        minWeightStandby: {
            type: string;
            format: string;
            minimum: number;
        };
        numberActiveValidators: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        numberStandbyValidators: {
            type: string;
            format: string;
            maximum: number;
        };
        posTokenID: {
            type: string;
            format: string;
        };
        validatorRegistrationFee: {
            type: string;
            format: string;
        };
        maxBFTWeightCap: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        commissionIncreasePeriod: {
            type: string;
            format: string;
        };
        maxCommissionIncreaseRate: {
            type: string;
            format: string;
            minimum: number;
            maximum: number;
        };
        useInvalidBLSKey: {
            type: string;
        };
        baseStakeAmount: {
            type: string;
            format: string;
            minimum: number;
        };
        lockingPeriodStaking: {
            type: string;
            format: string;
        };
        lockingPeriodSelfStaking: {
            type: string;
            format: string;
        };
        reportMisbehaviorReward: {
            type: string;
            format: string;
        };
        reportMisbehaviorLimitBanned: {
            type: string;
            format: string;
            minimum: number;
        };
    };
    required: string[];
};
export declare const getStakerRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            type: string;
            format: string;
        };
    };
};
export declare const getStakerResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        stakes: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    validatorAddress: {
                        type: string;
                        format: string;
                    };
                    amount: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
        pendingUnlocks: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    validatorAddress: {
                        type: string;
                        format: string;
                    };
                    amount: {
                        type: string;
                        format: string;
                    };
                    unstakeHeight: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
};
export declare const getAllValidatorsResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        validators: {
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        type: string;
                        format: string;
                    };
                    name: {
                        type: string;
                    };
                    totalStakeReceived: {
                        type: string;
                        format: string;
                    };
                    selfStake: {
                        type: string;
                        format: string;
                    };
                    lastGeneratedHeight: {
                        type: string;
                        format: string;
                    };
                    isBanned: {
                        type: string;
                    };
                    pomHeights: {
                        type: string;
                        items: {
                            type: string;
                            format: string;
                        };
                    };
                    punishmentPeriods: {
                        type: string;
                        items: {
                            type: string;
                            required: string[];
                            properties: {
                                start: {
                                    type: string;
                                    format: string;
                                };
                                end: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                    consecutiveMissedBlocks: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
};
export declare const getPoSTokenIDResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        tokenID: {
            type: string;
            format: string;
        };
    };
};
export declare const getValidatorsByStakeRequestSchema: {
    $id: string;
    type: string;
    properties: {
        limit: {
            type: string;
            format: string;
        };
    };
};
export declare const getValidatorsByStakeResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        validators: {
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        type: string;
                        format: string;
                    };
                    name: {
                        type: string;
                    };
                    totalStakeReceived: {
                        type: string;
                        format: string;
                    };
                    selfStake: {
                        type: string;
                        format: string;
                    };
                    lastGeneratedHeight: {
                        type: string;
                        format: string;
                    };
                    isBanned: {
                        type: string;
                    };
                    pomHeights: {
                        type: string;
                        items: {
                            type: string;
                            format: string;
                        };
                    };
                    punishmentPeriods: {
                        type: string;
                        items: {
                            type: string;
                            required: string[];
                            properties: {
                                start: {
                                    type: string;
                                    format: string;
                                };
                                end: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                    consecutiveMissedBlocks: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
};
export declare const getLockedRewardRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            type: string;
            format: string;
        };
        tokenID: {
            type: string;
            format: string;
        };
    };
};
export declare const getLockedRewardResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        reward: {
            type: string;
            format: string;
        };
    };
};
export declare const getClaimableRewardsRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            type: string;
            format: string;
        };
    };
};
export declare const getClaimableRewardsResponseSchema: {
    $id: string;
    type: string;
    properties: {
        rewards: {
            items: {
                type: string;
                required: string[];
                properties: {
                    tokenID: {
                        type: string;
                        format: string;
                    };
                    reward: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
};
export declare const getLockedStakedAmountRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            type: string;
            format: string;
        };
    };
};
export declare const getLockedStakedAmountResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        amount: {
            type: string;
            format: string;
        };
    };
};
export declare const getPendingUnlocksRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            type: string;
            format: string;
        };
    };
};
export declare const getPendingUnlocksResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        pendingUnlocks: {
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    validatorAddress: {
                        type: string;
                        format: string;
                    };
                    amount: {
                        type: string;
                        format: string;
                    };
                    unstakeHeight: {
                        type: string;
                        format: string;
                    };
                    expectedUnlockableHeight: {
                        type: string;
                        format: string;
                    };
                    unlockable: {
                        type: string;
                    };
                };
            };
        };
    };
};
export declare const getRegistrationFeeResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        registrationFee: {
            type: string;
        };
    };
};
export declare const getExpectedSharedRewardsRequestSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        validatorAddress: {
            type: string;
            format: string;
        };
        validatorReward: {
            type: string;
            format: string;
        };
        stake: {
            type: string;
            format: string;
        };
    };
};
export declare const getExpectedSharedRewardsResponseSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        reward: {
            type: string;
            format: string;
        };
    };
};
