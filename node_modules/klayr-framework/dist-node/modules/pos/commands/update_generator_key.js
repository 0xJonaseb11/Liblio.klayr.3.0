"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateGeneratorKeyCommand = void 0;
const state_machine_1 = require("../../../state_machine");
const base_command_1 = require("../../base_command");
const schemas_1 = require("../schemas");
const validator_1 = require("../stores/validator");
class UpdateGeneratorKeyCommand extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.schema = schemas_1.updateGeneratorKeyCommandParamsSchema;
    }
    addDependencies(validatorsMethod) {
        this._validatorsMethod = validatorsMethod;
    }
    async verify(context) {
        const { transaction } = context;
        const validatorSubstore = this.stores.get(validator_1.ValidatorStore);
        const entryExists = await validatorSubstore.has(context, transaction.senderAddress);
        if (!entryExists) {
            return {
                status: state_machine_1.VerifyStatus.FAIL,
                error: new Error('Validator substore must have an entry for the store key address'),
            };
        }
        return {
            status: state_machine_1.VerifyStatus.OK,
        };
    }
    async execute(context) {
        const { transaction } = context;
        const methodContext = context.getMethodContext();
        await this._validatorsMethod.setValidatorGeneratorKey(methodContext, transaction.senderAddress, context.params.generatorKey);
    }
}
exports.UpdateGeneratorKeyCommand = UpdateGeneratorKeyCommand;
//# sourceMappingURL=update_generator_key.js.map