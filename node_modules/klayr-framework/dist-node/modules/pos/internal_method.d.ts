/// <reference types="node" />
import { ImmutableMethodContext, MethodContext } from '../../state_machine';
import { BaseMethod } from '../base_method';
import { NamedRegistry } from '../named_registry';
import { ValidatorAccount, TokenMethod, StakeObject } from './types';
export declare class InternalMethod extends BaseMethod {
    private _tokenMethod;
    private readonly _moduleName;
    constructor(stores: NamedRegistry, events: NamedRegistry, moduleName: string);
    addDependencies(tokenMethod: TokenMethod): void;
    assignStakeRewards(methodContext: MethodContext, stakerAddress: Buffer, sentStake: StakeObject, validatorData: ValidatorAccount): Promise<void>;
    getLockedStakedAmount(ctx: ImmutableMethodContext, address: Buffer): Promise<bigint>;
}
