"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfig = exports.WEIGHT_SCALE_FACTOR = exports.MIN_WEIGHT = exports.MAX_COMMISSION = exports.MAX_CAP = exports.BLS_POP_LENGTH = exports.BLS_PUBLIC_KEY_LENGTH = exports.ED25519_PUBLIC_KEY_LENGTH = exports.FACTOR_SELF_STAKES = exports.MAX_COMMISSION_INCREASE_RATE = exports.COMMISSION_INCREASE_PERIOD = exports.COMMISSION = exports.MAX_NUMBER_BYTES_Q96 = exports.TOKEN_ID_LENGTH = exports.LOCAL_ID_LENGTH = exports.CHAIN_ID_LENGTH = exports.MAX_SNAPSHOT = exports.EMPTY_KEY = exports.VALIDATOR_LIST_ROUND_OFFSET = exports.REPORT_MISBEHAVIOR_REWARD = exports.REPORT_MISBEHAVIOR_LIMIT_BANNED = exports.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE = exports.VALIDATOR_REGISTRATION_FEE = exports.MAX_NUMBER_PENDING_UNLOCKS = exports.MAX_NUMBER_SENT_STAKES = exports.BASE_STAKE_AMOUNT = exports.MAX_LENGTH_NAME = exports.PUNISHMENT_WINDOW_SELF_STAKING = exports.PUNISHMENT_WINDOW_STAKING = exports.LOCKING_PERIOD_SELF_STAKING = exports.LOCKING_PERIOD_STAKING = exports.COMMAND_NAME_VALIDATOR_REGISTRATION = exports.MODULE_NAME_POS = void 0;
exports.MODULE_NAME_POS = 'pos';
exports.COMMAND_NAME_VALIDATOR_REGISTRATION = 'registerValidator';
exports.LOCKING_PERIOD_STAKING = 25920;
exports.LOCKING_PERIOD_SELF_STAKING = 241920;
exports.PUNISHMENT_WINDOW_STAKING = 241920;
exports.PUNISHMENT_WINDOW_SELF_STAKING = 725760;
exports.MAX_LENGTH_NAME = 20;
exports.BASE_STAKE_AMOUNT = BigInt(10) * BigInt(10) ** BigInt(8);
exports.MAX_NUMBER_SENT_STAKES = 10;
exports.MAX_NUMBER_PENDING_UNLOCKS = 20;
exports.VALIDATOR_REGISTRATION_FEE = BigInt(10) * BigInt(10) ** BigInt(8);
exports.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE = 260000;
exports.REPORT_MISBEHAVIOR_LIMIT_BANNED = 5;
exports.REPORT_MISBEHAVIOR_REWARD = BigInt(100000000);
exports.VALIDATOR_LIST_ROUND_OFFSET = 2;
exports.EMPTY_KEY = Buffer.alloc(0);
exports.MAX_SNAPSHOT = 3;
exports.CHAIN_ID_LENGTH = 4;
exports.LOCAL_ID_LENGTH = 4;
exports.TOKEN_ID_LENGTH = exports.CHAIN_ID_LENGTH + exports.LOCAL_ID_LENGTH;
exports.MAX_NUMBER_BYTES_Q96 = 24;
exports.COMMISSION = 10000;
exports.COMMISSION_INCREASE_PERIOD = 241920;
exports.MAX_COMMISSION_INCREASE_RATE = 500;
exports.FACTOR_SELF_STAKES = 10;
const FAIL_SAFE_MISSED_BLOCKS = 50;
const FAIL_SAFE_INACTIVE_WINDOW = 120960;
const MAX_BFT_WEIGHT_CAP = 500;
const USE_INVALID_BLS_KEY = false;
const NUMBER_ACTIVE_VALIDATORS = 51;
const NUMBER_STANDBY_VALIDATORS = 2;
const MIN_WEIGHT_STANDBY = BigInt(1000) * BigInt(10) ** BigInt(8);
exports.ED25519_PUBLIC_KEY_LENGTH = 32;
exports.BLS_PUBLIC_KEY_LENGTH = 48;
exports.BLS_POP_LENGTH = 96;
exports.MAX_CAP = 10000;
exports.MAX_COMMISSION = 10000;
exports.MIN_WEIGHT = BigInt(1000) * BigInt(10) ** BigInt(8);
exports.WEIGHT_SCALE_FACTOR = BigInt(1000) * BigInt(10) ** BigInt(8);
exports.defaultConfig = {
    factorSelfStakes: exports.FACTOR_SELF_STAKES,
    maxLengthName: exports.MAX_LENGTH_NAME,
    maxNumberSentStakes: exports.MAX_NUMBER_SENT_STAKES,
    maxNumberPendingUnlocks: exports.MAX_NUMBER_PENDING_UNLOCKS,
    failSafeMissedBlocks: FAIL_SAFE_MISSED_BLOCKS,
    failSafeInactiveWindow: FAIL_SAFE_INACTIVE_WINDOW,
    punishmentWindowStaking: exports.PUNISHMENT_WINDOW_STAKING,
    punishmentWindowSelfStaking: exports.PUNISHMENT_WINDOW_SELF_STAKING,
    minWeightStandby: MIN_WEIGHT_STANDBY.toString(),
    numberActiveValidators: NUMBER_ACTIVE_VALIDATORS,
    numberStandbyValidators: NUMBER_STANDBY_VALIDATORS,
    validatorRegistrationFee: exports.VALIDATOR_REGISTRATION_FEE.toString(),
    maxBFTWeightCap: MAX_BFT_WEIGHT_CAP,
    commissionIncreasePeriod: exports.COMMISSION_INCREASE_PERIOD,
    maxCommissionIncreaseRate: exports.MAX_COMMISSION_INCREASE_RATE,
    useInvalidBLSKey: USE_INVALID_BLS_KEY,
    baseStakeAmount: exports.BASE_STAKE_AMOUNT.toString(),
    lockingPeriodStaking: exports.LOCKING_PERIOD_STAKING,
    lockingPeriodSelfStaking: exports.LOCKING_PERIOD_SELF_STAKING,
    reportMisbehaviorReward: exports.REPORT_MISBEHAVIOR_REWARD.toString(),
    reportMisbehaviorLimitBanned: exports.REPORT_MISBEHAVIOR_LIMIT_BANNED,
    weightScaleFactor: exports.WEIGHT_SCALE_FACTOR.toString(),
};
//# sourceMappingURL=constants.js.map