"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegistrationFeeResponseSchema = exports.getAllValidatorsResponseSchema = exports.getValidatorResponseSchema = exports.getValidatorRequestSchema = exports.genesisPoAStoreSchema = exports.validatorSignatureMessageSchema = exports.updateAuthoritySchema = exports.updateGeneratorKeySchema = exports.registerAuthoritySchema = exports.configSchema = void 0;
const constants_1 = require("./constants");
exports.configSchema = {
    $id: '/poa/config',
    type: 'object',
    properties: {
        authorityRegistrationFee: {
            type: 'string',
            format: 'uint64',
        },
    },
};
const validator = {
    type: 'object',
    required: ['address', 'weight'],
    properties: {
        address: {
            dataType: 'bytes',
            minLength: constants_1.NUM_BYTES_ADDRESS,
            maxLength: constants_1.NUM_BYTES_ADDRESS,
            fieldNumber: 1,
        },
        weight: {
            dataType: 'uint64',
            fieldNumber: 2,
        },
    },
};
exports.registerAuthoritySchema = {
    $id: '/poa/command/registerAuthority',
    type: 'object',
    required: ['name', 'blsKey', 'proofOfPossession', 'generatorKey'],
    properties: {
        name: {
            dataType: 'string',
            minLength: 1,
            maxLength: constants_1.MAX_LENGTH_NAME,
            fieldNumber: 1,
        },
        blsKey: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_BLS_KEY,
            maxLength: constants_1.LENGTH_BLS_KEY,
            fieldNumber: 2,
        },
        proofOfPossession: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_PROOF_OF_POSSESSION,
            maxLength: constants_1.LENGTH_PROOF_OF_POSSESSION,
            fieldNumber: 3,
        },
        generatorKey: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_GENERATOR_KEY,
            maxLength: constants_1.LENGTH_GENERATOR_KEY,
            fieldNumber: 4,
        },
    },
};
exports.updateGeneratorKeySchema = {
    $id: '/poa/command/updateGeneratorKey',
    type: 'object',
    required: ['generatorKey'],
    properties: {
        generatorKey: {
            dataType: 'bytes',
            minLength: constants_1.LENGTH_GENERATOR_KEY,
            maxLength: constants_1.LENGTH_GENERATOR_KEY,
            fieldNumber: 1,
        },
    },
};
exports.updateAuthoritySchema = {
    $id: '/poa/command/updateAuthority',
    type: 'object',
    required: ['newValidators', 'threshold', 'validatorsUpdateNonce', 'signature', 'aggregationBits'],
    properties: {
        newValidators: {
            type: 'array',
            fieldNumber: 1,
            items: validator,
            minItems: 1,
            maxItems: constants_1.MAX_NUM_VALIDATORS,
        },
        threshold: {
            dataType: 'uint64',
            fieldNumber: 2,
        },
        validatorsUpdateNonce: {
            dataType: 'uint32',
            fieldNumber: 3,
        },
        signature: {
            dataType: 'bytes',
            fieldNumber: 4,
        },
        aggregationBits: {
            dataType: 'bytes',
            fieldNumber: 5,
        },
    },
};
exports.validatorSignatureMessageSchema = {
    $id: '/poa/command/validatorSignatureMessage',
    type: 'object',
    required: ['newValidators', 'threshold', 'validatorsUpdateNonce'],
    properties: {
        newValidators: {
            type: 'array',
            fieldNumber: 1,
            items: validator,
        },
        threshold: {
            dataType: 'uint64',
            fieldNumber: 2,
        },
        validatorsUpdateNonce: {
            dataType: 'uint32',
            fieldNumber: 3,
        },
    },
};
exports.genesisPoAStoreSchema = {
    $id: '/poa/genesis/genesisPoAStoreSchema',
    type: 'object',
    required: ['validators', 'snapshotSubstore'],
    properties: {
        validators: {
            type: 'array',
            fieldNumber: 1,
            items: {
                type: 'object',
                required: ['address', 'name', 'blsKey', 'proofOfPossession', 'generatorKey'],
                properties: {
                    address: {
                        dataType: 'bytes',
                        minLength: constants_1.NUM_BYTES_ADDRESS,
                        maxLength: constants_1.NUM_BYTES_ADDRESS,
                        fieldNumber: 1,
                    },
                    name: {
                        dataType: 'string',
                        minLength: 1,
                        maxLength: constants_1.MAX_LENGTH_NAME,
                        fieldNumber: 2,
                    },
                    blsKey: {
                        dataType: 'bytes',
                        minLength: constants_1.LENGTH_BLS_KEY,
                        maxLength: constants_1.LENGTH_BLS_KEY,
                        fieldNumber: 3,
                    },
                    proofOfPossession: {
                        dataType: 'bytes',
                        minLength: constants_1.LENGTH_PROOF_OF_POSSESSION,
                        maxLength: constants_1.LENGTH_PROOF_OF_POSSESSION,
                        fieldNumber: 4,
                    },
                    generatorKey: {
                        dataType: 'bytes',
                        minLength: constants_1.LENGTH_GENERATOR_KEY,
                        maxLength: constants_1.LENGTH_GENERATOR_KEY,
                        fieldNumber: 5,
                    },
                },
            },
        },
        snapshotSubstore: {
            type: 'object',
            fieldNumber: 2,
            properties: {
                activeValidators: {
                    type: 'array',
                    fieldNumber: 1,
                    items: {
                        type: 'object',
                        required: ['address', 'weight'],
                        properties: {
                            address: {
                                dataType: 'bytes',
                                minLength: constants_1.NUM_BYTES_ADDRESS,
                                maxLength: constants_1.NUM_BYTES_ADDRESS,
                                fieldNumber: 1,
                            },
                            weight: {
                                dataType: 'uint64',
                                fieldNumber: 2,
                            },
                        },
                    },
                    minItems: 1,
                    maxItems: constants_1.MAX_NUM_VALIDATORS,
                },
                threshold: {
                    dataType: 'uint64',
                    fieldNumber: 2,
                },
            },
            required: ['activeValidators', 'threshold'],
        },
    },
};
const validatorJSONSchema = {
    type: 'object',
    required: ['address', 'name', 'weight'],
    properties: {
        address: {
            type: 'string',
            format: 'klayr32',
        },
        name: {
            type: 'string',
        },
        weight: {
            type: 'string',
            format: 'uint64',
        },
    },
};
exports.getValidatorRequestSchema = {
    $id: 'modules/poa/endpoint/getValidatorRequest',
    type: 'object',
    required: ['address'],
    properties: {
        address: {
            dataType: 'string',
            format: 'klayr32',
        },
    },
};
exports.getValidatorResponseSchema = {
    $id: 'modules/poa/endpoint/getValidatorResponse',
    ...validatorJSONSchema,
};
exports.getAllValidatorsResponseSchema = {
    $id: 'modules/poa/endpoint/getAllValidatorsResponse',
    type: 'object',
    required: ['validators'],
    properties: {
        validators: {
            type: 'array',
            items: validatorJSONSchema,
        },
    },
};
exports.getRegistrationFeeResponseSchema = {
    $id: 'modules/poa/endpoint/getRegistrationFeeResponse',
    type: 'object',
    required: ['fee'],
    properties: {
        fee: {
            type: 'string',
        },
    },
};
//# sourceMappingURL=schemas.js.map