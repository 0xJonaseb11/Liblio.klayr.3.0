"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SUBSTORE_PREFIX_SNAPSHOT_INDEX = exports.SUBSTORE_PREFIX_NAME_INDEX = exports.SUBSTORE_PREFIX_CHAIN_INDEX = exports.SUBSTORE_PREFIX_VALIDATOR_INDEX = exports.KEY_SNAPSHOT_2 = exports.KEY_SNAPSHOT_1 = exports.KEY_SNAPSHOT_0 = exports.defaultConfig = exports.MAX_UINT64 = exports.COMMAND_UPDATE_AUTHORITY = exports.COMMAND_UPDATE_KEY = exports.COMMAND_REGISTER_AUTHORITY = exports.EMPTY_BYTES = exports.AUTHORITY_REGISTRATION_FEE = exports.MESSAGE_TAG_POA = exports.POA_VALIDATOR_NAME_REGEX = exports.MAX_NUM_VALIDATORS = exports.NUM_BYTES_ADDRESS = exports.LENGTH_GENERATOR_KEY = exports.LENGTH_PROOF_OF_POSSESSION = exports.LENGTH_BLS_KEY = exports.MAX_LENGTH_NAME = exports.MODULE_NAME_POA = exports.UpdateAuthorityResult = void 0;
const cryptography_1 = require("@klayr/cryptography");
var UpdateAuthorityResult;
(function (UpdateAuthorityResult) {
    UpdateAuthorityResult[UpdateAuthorityResult["SUCCESS"] = 0] = "SUCCESS";
    UpdateAuthorityResult[UpdateAuthorityResult["FAIL_INVALID_SIGNATURE"] = 1] = "FAIL_INVALID_SIGNATURE";
})(UpdateAuthorityResult = exports.UpdateAuthorityResult || (exports.UpdateAuthorityResult = {}));
exports.MODULE_NAME_POA = 'poa';
exports.MAX_LENGTH_NAME = 20;
exports.LENGTH_BLS_KEY = 48;
exports.LENGTH_PROOF_OF_POSSESSION = 96;
exports.LENGTH_GENERATOR_KEY = 32;
exports.NUM_BYTES_ADDRESS = 20;
exports.MAX_NUM_VALIDATORS = 199;
exports.POA_VALIDATOR_NAME_REGEX = /^[a-z0-9!@$&_.]+$/;
exports.MESSAGE_TAG_POA = 'KLY_POA_';
exports.AUTHORITY_REGISTRATION_FEE = BigInt(1000000000);
exports.EMPTY_BYTES = Buffer.alloc(0);
exports.COMMAND_REGISTER_AUTHORITY = 'registerAuthority';
exports.COMMAND_UPDATE_KEY = 'updateKey';
exports.COMMAND_UPDATE_AUTHORITY = 'updateAuthority';
exports.MAX_UINT64 = BigInt(2) ** BigInt(64) - BigInt(1);
exports.defaultConfig = {
    authorityRegistrationFee: exports.AUTHORITY_REGISTRATION_FEE.toString(),
};
exports.KEY_SNAPSHOT_0 = cryptography_1.utils.intToBuffer(0, 4);
exports.KEY_SNAPSHOT_1 = cryptography_1.utils.intToBuffer(1, 4);
exports.KEY_SNAPSHOT_2 = cryptography_1.utils.intToBuffer(2, 4);
exports.SUBSTORE_PREFIX_VALIDATOR_INDEX = 0;
exports.SUBSTORE_PREFIX_CHAIN_INDEX = 1;
exports.SUBSTORE_PREFIX_NAME_INDEX = 2;
exports.SUBSTORE_PREFIX_SNAPSHOT_INDEX = 3;
//# sourceMappingURL=constants.js.map