export declare const registerMultisignatureParamsSchema: {
    $id: string;
    type: string;
    properties: {
        numberOfSignatures: {
            dataType: string;
            fieldNumber: number;
            minimum: number;
            maximum: number;
        };
        mandatoryKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
            minItems: number;
            maxItems: number;
        };
        optionalKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
            minItems: number;
            maxItems: number;
        };
        signatures: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
    };
    required: string[];
};
export declare const sortMultisignatureGroupRequestSchema: {
    $id: string;
    required: string[];
    type: string;
    properties: {
        mandatory: {
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    publicKey: {
                        type: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    signature: {
                        type: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                };
            };
            minItems: number;
            maxItems: number;
        };
        optional: {
            type: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    publicKey: {
                        type: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                    signature: {
                        type: string;
                        minLength: number;
                        maxLength: number;
                        fieldNumber: number;
                    };
                };
            };
            minItems: number;
            maxItems: number;
        };
    };
};
export declare const multisigRegMsgSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        address: {
            dataType: string;
            fieldNumber: number;
            minLength: number;
            maxLength: number;
        };
        nonce: {
            dataType: string;
            fieldNumber: number;
        };
        numberOfSignatures: {
            dataType: string;
            fieldNumber: number;
        };
        mandatoryKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
        optionalKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
    };
};
export declare const configSchema: {
    $id: string;
    type: string;
    properties: {
        maxNumberOfSignatures: {
            type: string;
            format: string;
        };
    };
};
export declare const genesisAuthStoreSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        authDataSubstore: {
            type: string;
            fieldNumber: number;
            items: {
                type: string;
                required: string[];
                properties: {
                    address: {
                        dataType: string;
                        fieldNumber: number;
                    };
                    authAccount: {
                        type: string;
                        fieldNumber: number;
                        required: string[];
                        properties: {
                            nonce: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            numberOfSignatures: {
                                dataType: string;
                                fieldNumber: number;
                            };
                            mandatoryKeys: {
                                type: string;
                                fieldNumber: number;
                                items: {
                                    dataType: string;
                                    minLength: number;
                                    maxLength: number;
                                };
                            };
                            optionalKeys: {
                                type: string;
                                fieldNumber: number;
                                items: {
                                    dataType: string;
                                    minLength: number;
                                    maxLength: number;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const addressRequestSchema: {
    $id: string;
    type: string;
    properties: {
        address: {
            type: string;
            format: string;
        };
    };
    required: string[];
};
export declare const transactionRequestSchema: {
    $id: string;
    type: string;
    properties: {
        transaction: {
            type: string;
            format: string;
        };
    };
    required: string[];
};
export declare const verifyResultSchema: {
    $id: string;
    type: string;
    properties: {
        verified: {
            type: string;
        };
    };
    required: string[];
};
export declare const sortMultisignatureGroupResponseSchema: {
    $id: string;
    type: string;
    properties: {
        mandatoryKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
            minItems: number;
            maxItems: number;
        };
        optionalKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
            minItems: number;
            maxItems: number;
        };
        signatures: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
    };
    required: string[];
};
export declare const multiSigRegMsgTagSchema: {
    $id: string;
    type: string;
    properties: {
        tag: {
            type: string;
        };
    };
    required: string[];
};
