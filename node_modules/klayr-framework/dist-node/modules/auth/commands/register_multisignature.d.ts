import { BaseCommand } from '../../base_command';
import { CommandExecuteContext, CommandVerifyContext, VerificationResult } from '../../../state_machine';
import { RegisterMultisignatureParams } from '../types';
export declare class RegisterMultisignatureCommand extends BaseCommand {
    schema: {
        $id: string;
        type: string;
        properties: {
            numberOfSignatures: {
                dataType: string;
                fieldNumber: number;
                minimum: number;
                maximum: number;
            };
            mandatoryKeys: {
                type: string;
                items: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                };
                fieldNumber: number;
                minItems: number;
                maxItems: number;
            };
            optionalKeys: {
                type: string;
                items: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                };
                fieldNumber: number;
                minItems: number;
                maxItems: number;
            };
            signatures: {
                type: string;
                items: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                };
                fieldNumber: number;
            };
        };
        required: string[];
    };
    private _maxNumberOfSignatures;
    init(args: {
        maxNumberOfSignatures: number;
    }): void;
    verify(context: CommandVerifyContext<RegisterMultisignatureParams>): Promise<VerificationResult>;
    execute(context: CommandExecuteContext<RegisterMultisignatureParams>): Promise<void>;
}
