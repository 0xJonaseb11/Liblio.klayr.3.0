/// <reference types="node" />
import { BaseEvent, EventQueuer } from '../../base_event';
export interface MultisignatureRegistrationEventData {
    numberOfSignatures: number;
    mandatoryKeys: Buffer[];
    optionalKeys: Buffer[];
}
export declare const multisigRegDataSchema: {
    $id: string;
    type: string;
    required: string[];
    properties: {
        numberOfSignatures: {
            dataType: string;
            fieldNumber: number;
        };
        mandatoryKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
        optionalKeys: {
            type: string;
            items: {
                dataType: string;
                minLength: number;
                maxLength: number;
            };
            fieldNumber: number;
        };
    };
};
export declare class MultisignatureRegistrationEvent extends BaseEvent<MultisignatureRegistrationEventData> {
    schema: {
        $id: string;
        type: string;
        required: string[];
        properties: {
            numberOfSignatures: {
                dataType: string;
                fieldNumber: number;
            };
            mandatoryKeys: {
                type: string;
                items: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                };
                fieldNumber: number;
            };
            optionalKeys: {
                type: string;
                items: {
                    dataType: string;
                    minLength: number;
                    maxLength: number;
                };
                fieldNumber: number;
            };
        };
    };
    log(ctx: EventQueuer, senderAddress: Buffer, data: MultisignatureRegistrationEventData): void;
}
