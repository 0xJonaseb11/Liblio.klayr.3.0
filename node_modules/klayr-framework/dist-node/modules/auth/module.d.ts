import { BaseModule, ModuleInitArgs, ModuleMetadata } from '../base_module';
import { GenesisBlockExecuteContext, TransactionExecuteContext, TransactionVerifyContext, VerificationResult } from '../../state_machine';
import { AuthMethod } from './method';
import { AuthEndpoint } from './endpoint';
import { RegisterMultisignatureCommand } from './commands/register_multisignature';
export declare class AuthModule extends BaseModule {
    method: AuthMethod;
    endpoint: AuthEndpoint;
    configSchema: {
        $id: string;
        type: string;
        properties: {
            maxNumberOfSignatures: {
                type: string;
                format: string;
            };
        };
    };
    private readonly _registerMultisignatureCommand;
    commands: RegisterMultisignatureCommand[];
    private _moduleConfig;
    constructor();
    metadata(): ModuleMetadata;
    init(args: ModuleInitArgs): Promise<void>;
    initGenesisState(context: GenesisBlockExecuteContext): Promise<void>;
    verifyTransaction(context: TransactionVerifyContext): Promise<VerificationResult>;
    beforeCommandExecute(context: TransactionExecuteContext): Promise<void>;
}
